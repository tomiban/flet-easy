{"config":{"lang":["es"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"en/","title":"Home","text":"<p>Flet-Easy is a user-friendly add-on package for Flet, offering a cleaner code structure with numerous customizable features like routers, decorators, route protection and more.</p>"},{"location":"en/#changelog","title":"Changelog","text":"New features"},{"location":"en/#v020","title":"v0.2.0","text":"<ul> <li>Optimize code for <code>flet&gt;=0.21</code>.</li> <li>Fix async.</li> <li>Automatic routing. <code>[See more]</code></li> <li>Add the <code>title</code> parameter to the <code>page</code> decorator. <code>[See more]</code></li> <li>Add <code>JWT</code> support for authentication sessions in the data parameter. <code>[See more]</code></li> <li>Add a <code>Cli</code> to create a project structure based on the MVC design pattern. <code>[See more]</code></li> <li>Middleware Support. <code>[See more]</code></li> <li>Add more simplified Ref control. <code>[See more]</code></li> <li>Enhanced Documentation.</li> <li>Ruff Integration.</li> </ul>"},{"location":"en/#changes-in-the-api","title":"Changes in the api:","text":"<ul> <li>The <code>async</code> methods have been removed, as they are not necessary. \u00a0 </li> <li>Change <code>update_login</code> method to <code>login</code> of Datasy. <code>[See more]</code></li> <li>Change <code>logaut</code> method to <code>logout</code> of Datasy. <code>[See more]</code></li> <li>Changed function parameter decorated on <code>login</code> | <code>(page:ft.Page -&gt; data:fs:Datasy)</code> <code>[See more]</code></li> <li>Changed function parameter decorated on <code>config_event_handler</code> | <code>(page:ft.Page -&gt; data:fs:Datasy)</code> <code>[See more]</code></li> </ul>"},{"location":"en/#021","title":"0.2.1","text":"<ul> <li>Fix page loading twice </li> </ul>"},{"location":"en/#v022","title":"v0.2.2","text":"<ul> <li>Fix sensitivity in url with capital letters.</li> <li>Fix 'back' button in dashboard page app bar not working.</li> <li>Fix error caused by <code>Timeout waiting invokeMethod</code>.</li> </ul>"},{"location":"en/#v024","title":"v0.2.4","text":"<ul> <li>\u26a1 The speed of the router is improved to more than twice as fast.</li> <li>Ways to install Flet-Easy. <code>[See more]</code></li> <li>Supporting the use of class to create a view. <code>[See more]</code>versions. <code>[See more]</code></li> <li>New more responsive fs <code>cli</code>. <code>[See more]</code></li> <li>Now <code>page.go()</code> and <code>data.go()</code> work similarly to go to a page (<code>View</code>), the only difference isthat <code>data.go   ()</code> checks for url redirects when using <code>data.redirect()</code>. <code>[See more]</code></li> <li>Bug fixes found in previous changes. *New method added in Datasy (data) <code>[See more]</code><ul> <li><code>history_routes</code> : Get the history of the routes.</li> <li><code>go_back</code> : Method to go back to the previous route.</li> </ul> </li> </ul>"},{"location":"en/#v026","title":"v0.2.6","text":"<ul> <li>Fix route error page 404. <code>[See more]</code></li> <li>Add route checker without dependency. <code>[See more]</code></li> </ul>"},{"location":"en/basic-jwt/","title":"Basic JWT","text":"<p>JWT is a standard for securely transmitting data between parties in JSON format. It is composed of three parts: the header, the payload and the signature. It is commonly used for authentication and authorization in web applications and API services. JWTs are compact, self-contained and easy to use in distributed environments.</p> <p>Flet-Easy contains a basic integration to use JWT in a simple and fast way, by integrating JWT in the app you can configure user session time, as well as an automatic session expiration. In order to add JWT we will need the following configurations.</p> <p>In the <code>FletEasy</code> class we must configure the following parameters:</p> <ul> <li>The value of <code>auto_logout</code> is false by default (closes session automatically).</li> <li>To configure the <code>secret_key</code> it is necessary to use the <code>SecretKey</code> class of <code>FletEasy</code>.</li> </ul>"},{"location":"en/basic-jwt/#configuration","title":"Configuration","text":""},{"location":"en/basic-jwt/#algorithm-hs256","title":"Algorithm HS256","text":"main.py<pre><code>import flet_easy  as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n        algorithm=fs.Algorithm.HS256,\n        secret=SECRET_KEY\n        ),\n    auto_logout=True,  # Activates the automatic closing of the session.\n)\n</code></pre>"},{"location":"en/basic-jwt/#algorithm-rs256","title":"Algorithm RS256","text":"<p>Info</p> <p>To use the <code>RS256</code> algorithm You must have the <code>cryptographic</code> library installed.</p> main.py<pre><code>import flet_easy  as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n       algorithm=fs.Algorithm.RS256,\n       pem_key=fs.PemKey(private=PRIVATE_KEY, public=PUBLIC_KEY)\n    ),\n    auto_logout=True,  # Activates the automatic closing of the session.\n)\n</code></pre>"},{"location":"en/basic-jwt/#get-secret_key","title":"Get <code>secret_key</code>","text":"<p>FletEasy provides a class called <code>EasyKey</code> to easily get a secret_key to use, then we can copy it to a file or use it as environment variables.</p> <pre><code>import flet_easy as fs\n\nkey = fs.EasyKey()\n\n# --- HS256\nSECRET_KEY = key.secret_key()\n\n# --- RS256\nPRIVATE_KEY = key.private_key()\nPUBLIC_KEY = key.public_key()\n</code></pre>"},{"location":"en/basic-jwt/#how-to-use-it","title":"How to use it","text":"<p>After having configured the <code>secret_key</code>, we can start configuring the use of JWT. For this we are going to require the use of the <code>login</code> method of <code>Datasy</code> (data), it will be used as normally we would use it without using JWT, but we will use the <code>time_expiry</code> and <code>value</code> parameter that will have to be a dictionary obligatorily.</p> <ul> <li>More details of the <code>login</code> method</li> <li>More details of the <code>logout</code> method</li> </ul>"},{"location":"en/basic-jwt/#example","title":"Example","text":"sensitive.py<pre><code>SECRET_KEY = \"7dbd00fd8ba528257c641b7c5c411cb5abdca774d348d36a3af86f644b132382a3f3f71361fd4e19d2d2dcbcee6f2769af84cbe372a3a5b9db35d3d2707e1d0a\"\n\nPUBLIC_KEY = \"\"\"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAmSNxQBBYOJEJD+XIDDBXK1qxUTpSsiybrtdvZH30f6G1o1MNsj17\nJjexf2ub7GO0J3TbDz4+dkEtVciG5cOG+bJ2RR2+09yIm3MC5xdRB12DaexU6EGd\nEzbrZFiOxurzL3SSXzaABo/5DoLjk+eEF9YHhnnmoCjuAaV195PQ1Bkrn6h6kTpP\nMtpJ5UIMVAFrtNNXPcii4P6ESn00kxcL55daVoKpyuC2hOiZFn9uQHoUrrtNGJGi\nil6JjJPWWr/PU3RKdf++/QNsoJ2Erkob1FWz16+lIhJ2fsK6Qai6K0mXUqTPF5Hl\n/Pi7zyw81fAgLE3bOdzVJAbBkMqKRvR9nQIDAQAB\n-----END RSA PUBLIC KEY-----\"\"\"\n\nPRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\nMIIEqQIBAAKCAQEAmSNxQBBYOJEJD+XIDDBXK1qxUTpSsiybrtdvZH30f6G1o1MN\nsj17Jjexf2ub7GO0J3TbDz4+dkEtVciG5cOG+bJ2RR2+09yIm3MC5xdRB12DaexU\n6EGdEzbrZFiOxurzL3SSXzaABo/5DoLjk+eEF9YHhnnmoCjuAaV195PQ1Bkrn6h6\nkTpPMtpJ5UIMVAFrtNNXPcii4P6ESn00kxcL55daVoKpyuC2hOiZFn9uQHoUrrtN\nGJGiil6JjJPWWr/PU3RKdf++/QNsoJ2Erkob1FWz16+lIhJ2fsK6Qai6K0mXUqTP\nF5Hl/Pi7zyw81fAgLE3bOdzVJAbBkMqKRvR9nQIDAQABAoIBAQCCRZNGw2C5JjBG\nVNvb+pd86xbimbHVnnsFvoElRLzkgmUpPjLtiL2lYkVdtuYaryqHUjI0AmhSYtm1\nGvQeqzm8WqOf4lD+m6GeU7WJbt1gXZ24UvJb7c04lkSixW8YKrCbkxgdZRh9/KYL\nQS9mF9HYERuvuy2E26wXWIwBJjQoB9BJpM6LA2+Pwb6Bygc6e/UOq981+BAY3bbq\nPvRxfLk60xWLmtrS/O9HdGB0vNEvznG6X0+/v0a7Qv8AGd/sSU6cgowF+gyCwG9u\n9uj7X6mEfNw5ZDUvJnH6wWRWfu+zeW4e18lA4GYiQwwXyciDey5T+RI/d4HgNyLn\nh2SHLFmlAoGJALkDoPdvIUyuKkfe6zl2w1FV2uYF4RLdU9O632zI7Ts4dYnhJxkT\nQOdjJaBFSEBwz7YdgMP8ZAWhOEfB582Bkt99mn7Q4YtARMnx44/Ex2CKN6jXr6OS\np8jxIuOfCd/rpMFVz0+SiqS7yWcTPdSbLPWFAu6KeYvfLMEHzi+Ah7r1UEk2k4HW\nL+MCeQDT5O5460PFcZP+hSIsGT/mW5ChRmZS/7/ZB0zJQ9nB/SGtgD/AwAgusHRb\n9+DherSehCHWcahRzDONy+UDXxuVzwSSweD4HJCG7tPykGDxEQmhSY56pShaAp1t\n+u0UWD+Sn6jpEEsZzNsjaxCyzCMwem2Xrt5HFH8CgYgPRohsxYUnUp31Dye2t+KK\nfZ80LLoXl6SLL7uwvKoxoIi72JYk0N0j/aCmqfG8OFQ+AhOWmukbOeNusUjVQ+R/\nhVxTKiXlHGpRjiIuxZ18kAzmaOB8jehCg/5Qctoa3dbdi5sxQ7UkwshvNTx+qE0+\n/DtwvIgqj0OfsGhKrb8HJaf6U4I8TxXnAnhVh/VSzfR/QIdyl57hmheXDqLk1pv7\nKMzx9+Zg34iIq3rqo/gX/+vNnOB7NyWJHpTF36QhAaPl0L2GoSUCJWPnJrc73hLH\nVBBqxwC6yti2th/jAOQIUZ5mJuQRPtZv/ec7ckMmQLNv6KcUNuV4proVmXWfYrDK\nlFUCgYg62k/vLCnHlnl7PwMb9BJAVyxuWPjihhfKJx3i371/iQn+bHD86PnsfRUO\nBfJI9TjPn2k1r+R4AxSzFOr0ZwmusjfyklzJS77wAaAaH9xvfEFLCqtbfZv+w3oh\nKzuz8LYM/PJmIWIBTo2mqDwp/Iv2EbMKw0Jjn0cgnZINs9UciQqhxX4R49I3\n-----END RSA PRIVATE KEY-----\"\"\"\n</code></pre> <p>In this example we are going to do very similar with the <code>Route-protection</code> example, we have only configured the <code>secret_key</code>, used the <code>login</code> method <code>time_expiry</code> parameter and used the <code>decode</code> function of <code>FletEasy</code> to get the payload stored in the decoded client storage.</p> main.py<pre><code>from datetime import timedelta\n\nimport flet as ft\nimport flet_easy as fs\nfrom sensitive import SECRET_KEY\n\ndb = []\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n        algorithm=fs.Algorithm.HS256,\n        secret=SECRET_KEY\n        ),\n    auto_logout=True,  # Activates the automatic closing of the session.\n)\n\n@app.login\ndef login_x(data: fs.Datasy):\n    # decode payload\n    value = fs.decode(key_login=\"login\", data=data)\n\n    print(\"value:\", value)\n\n    \"\"\" We verify if the username that is stored in the browser is in the\n    simulated database. \"\"\"\n    if not value:\n        return False\n    elif value.get(\"user\") in db:\n        return True\n\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\", protected_route=True)\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\n                \"Logaut\",\n                on_click=data.logout(\"login\")\n                ),\n            ft.ElevatedButton(\n                \"Home\",\n                on_click=data.go(\"/login\")\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # create login stored user\n    username = ft.TextField(label=\"Username\", width=200)\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated database\n\n        \"\"\"First the values must be stored in the browser, then in the\n        login decorator the value must be retrieved through the key used\n        and then validations must be used.\"\"\"\n        data.login(\n            key=\"login\",\n            value={\"user\": username.value},\n            next_route=\"/dashboard\",\n            time_expiry=timedelta(seconds=10),\n        )\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\n                \"store login in browser\",\n                on_click=store_login\n                ),\n            ft.ElevatedButton(\n                \"go Dasboard\",\n                on_click=data.go(\"/dashboard\")\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"en/basic-jwt/#demo","title":"\ud83c\udfac Demo","text":"<p>APP </p> <p>WEB </p>"},{"location":"en/basic-jwt/#decode","title":"decode","text":"<p>Decode the jwt and update the browser sessions.</p> <p>Parameters to use:</p> <ul> <li><code>key_login</code> : key used to store the data in the client, also used in the <code>login</code> method of <code>Datasy</code>.</li> <li><code>data</code> : Object instance of the <code>Datasy</code> class.</li> </ul> <p>Info</p> <p>*Support async, example: <code>decode_async</code>. * If the function to use is async it is recommended to use <code>decode_async</code> to avoid errors.</p> <p>Note</p> <p>The <code>decode</code> and <code>decode_async</code> functions can be used in other parts of the code, for example: Middleware</p>"},{"location":"en/begin/","title":"Begin","text":""},{"location":"en/begin/#flet-easy","title":"Flet-Easy","text":"<p><code>Flet-Easy</code> is a package built as an add-on for <code>Flet</code>, designed for beginners, what it does is to facilitate the use of <code>Flet</code> when building your applications, with a tidier and simpler code.</p>"},{"location":"en/begin/#features","title":"Features","text":"<ul> <li>Easy to use (hence the name).</li> <li>Facilitates <code>flet</code> event handling.</li> <li>Simple page routing (There are three ways) for whichever one suits you best. [<code>See more</code>]</li> <li>App construction with numerous pages and custom flet configurations for desktop, mobile and web sites.</li> <li>Provides a better construction of your code, which can be scalable and easy to read (it adapts to your preferences, there are no limitations).</li> <li>Dynamic routing, customization in the routes for greater accuracy in sending data. [<code>See more</code>]</li> <li>Routing protection [<code>See more</code>]</li> <li>Custom Page 404 [<code>See more</code>]</li> <li>Controlled data sharing between pages. [<code>See more</code>]</li> <li>Asynchronous support.</li> <li>Middleware Support (in the app in general and in each of the pages). [<code>See more</code>]</li> <li>JWT support for authentication sessions in the data parameter. (useful to control the time of sessions) [<code>See more</code>]</li> <li>Working with other applications. [<code>See more</code>]</li> <li>CLI to create app structure <code>FletEasy</code> (<code>fs init</code>) [<code>See more</code>]</li> <li>Easy integration of <code>on_keyboard_event</code> in each of the pages. [<code>See more</code>]</li> <li>Use the percentage of the page width and height of the page with <code>on_resize</code>. [<code>See more</code>]</li> <li><code>ResponsiveControlsy</code> control to make the app responsive, useful for desktop applications. [<code>See more</code>]</li> <li>Soporta Application Packaging para su distribuci\u00f3n. [<code>See more</code>]</li> </ul>"},{"location":"en/begin/#flet-events-it-handles","title":"Flet events it handles","text":"<ul> <li><code>on_route_change</code> :  Dynamic routing</li> <li><code>on_view_pop</code></li> <li><code>on_keyboard_event</code></li> <li><code>on_resize</code></li> <li><code>on_error</code></li> </ul>"},{"location":"en/begin/#app-example","title":"App example","text":"<p>Here is an example of an application with 2 pages, \"Home\" and \"Counter\":</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/flet-easy\")\n\n# We add a page\n@app.page(route=\"/flet-easy\", title=\"Flet-Easy\")\ndef index_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Home page\"),\n            ft.FilledButton(\"Go to Counter\", on_click=data.go(\"/counter\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We add a second page\n@app.page(route=\"/counter\", title=\"Counter\")\ndef counter_page(data: fs.Datasy):\n    page = data.page\n\n    txt_number = ft.TextField(value=\"0\", text_align=\"right\", width=100)\n\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    return ft.View(\n        controls=[\n            ft.Row(\n                [\n                    ft.IconButton(ft.icons.REMOVE, on_click=minus_click),\n                    txt_number,\n                    ft.IconButton(ft.icons.ADD, on_click=plus_click),\n                ],\n                alignment=\"center\",\n            ),\n            ft.FilledButton(\"Go to Home\", on_click=data.go(\"/flet-easy\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We run the application\napp.run()\n</code></pre>"},{"location":"en/begin/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/cli-to-create-app/","title":"CLI to create app","text":"<p>To start a project with <code>Flet-Easy</code> provides a cli to facilitate the construction of an app.</p>"},{"location":"en/cli-to-create-app/#app-structure","title":"App structure","text":"<p>Structure main</p> <p></p> <p>Which can be scaled to an app with higher requirements such as a design pattern based on MVC.</p> <p>Example structure MVC</p> <p></p>"},{"location":"en/cli-to-create-app/#cli","title":"CLI","text":"Remember to install FletEasy first. <pre><code>pip install flet-easy[all]\n</code></pre> <p>Note</p> <p>If you use the <code>fs</code> cli, it is important to have <code>git</code> installed.</p> <pre><code>fs init\n</code></pre>"},{"location":"en/cli-to-create-app/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/data-sharing-between-pages/","title":"Data sharing between pages","text":"<p>To be able to manipulate the data between client sessions, <code>data.share</code> is used, <code>data</code> is the parameter of the function decorated by <code>page</code>. Unlike <code>page.session</code> this allows a better protection of the data that you want to share in the pages, because through the <code>share_data</code> parameter of the <code>page</code> decorator you can limit to which pages you want to share the data, if the page does not have permission to share the data it will be automatically deleted. The methods to use are similar <code>page.session</code> example.</p> <p>Besides that you get some extra methods:</p> <ul> <li><code>contains</code> : Returns a boolean, it is useful to know if there is shared data.</li> <li><code>get_values</code> : Get a list of all shared values.</li> <li><code>get_all</code> : Get the dictionary of all shared values.</li> </ul>"},{"location":"en/data-sharing-between-pages/#example","title":"Example","text":"<p>It can be created in different file.py, for example using the <code>AddPagesy</code> class of <code>Flet-Easy</code> and then added to the main.py file.</p> <p>In this case page #1 creates the data to be shared with the other pages that have the <code>share_data</code> parameter of the <code>page</code> decorator enabled. With that in mind page #3 will not be able to access the shared data, in which case the shared data will be deleted automatically. (This works on pages that redirect continuously, if you switch to a page that does not allow data sharing, it will be deleted).</p> <pre><code>from dataclasses import dataclass\n\nimport flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/send-data\")\n\n\n@dataclass\nclass Test:\n    name: int\n    version: str\n\n\n# 1\n@app.page(\"/send-data\", title=\"send data\", share_data=True)\nasync def send_data_page(data: fs.Datasy):\n    page = data.page\n\n    data.share.set(\"test\", Test(\"Flet-Easy\", \"0.2.0\"))\n    data.share.set(\"owner\", \"Daxexs\")\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"data keys: {data.share.get_keys()}\"),\n            ft.Text(f\"data values: {data.share.get_values()}\"),\n            ft.Text(f\"data dict: {data.share.get_all()}\"),\n            ft.ElevatedButton(\n                \"View shared data\",\n                on_click=data.go(\"/data\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# 2\n@app.page(\"/data\", title=\"data\", share_data=True)\nasync def get_data_page(data: fs.Datasy):\n    page = data.page\n\n    # It is checked if there is data stored in the dictionary (data.share.set).\n    if data.share.contains():\n        x: Test = data.share.get(\"test\")\n        y: str = data.share.get(\"owner\")\n        res = ft.Text(f\"Name: {x.name}\\nVersion: {x.version}\\n-----\\nOwner: {y}\")\n    else:\n        res = ft.Text(\"No value passed on the page!.\")\n\n    return ft.View(\n        controls=[\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n                ),\n            ft.ElevatedButton(\n                \"Check the following page for matched data\",\n                on_click=data.go(\"/info\")\n            ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# 3\n@app.page(\"/info\", title=\"Information\")\nasync def info_page(data: fs.Datasy):\n    page = data.page\n\n    # It is checked if there is data stored in the dictionary (data.share.set).\n    if data.share.contains():\n        x: Test = data.share.get(\"test\")\n        y: str = data.share.get(\"owner\")\n        res = ft.Text(f\"Name: {x.name}\\nVersion: {x.version}\\n-----\\nOwner: {y}\")\n    else:\n        res = ft.Text(\"No value passed on the page!.\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Access to shared data?\"),\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"en/data-sharing-between-pages/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/dynamic-routes/","title":"Dynamic routes","text":"<p>Flet-Easy provides a simple and powerful routing to manage the access to the pages created, it contains 3 ways of use (choose the one that suits you best).</p>"},{"location":"en/dynamic-routes/#simple-form","title":"Simple form","text":"<p>Get the values \u200b\u200bof the URL parameters, using the data from the parameters of the function decorated by <code>page()</code>.</p> Available from version 0.2.6 <p>Any of these formats are supported:</p> <ul> <li><code>{id}</code></li> <li><code>&lt;id&gt;</code></li> </ul>"},{"location":"en/dynamic-routes/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/test/10/user/dxs\")\n\n@app.page(route=\"/test/{id}/user/{name}\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy, id, name):\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\", size=50),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"en/dynamic-routes/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/dynamic-routes/#advanced-form","title":"Advanced Form","text":"Available from version 0.2.6 <p>The typing of parameters within the url changes, now supporting the native python types <code>(:int, :str, :bool, :float</code>), instead of using <code>(:d, :l)</code> which were for a number and string respectively.</p> <p>Utilice par\u00e1metros din\u00e1micos en la URL para obtener datos espec\u00edficos, por ejemplo, se solicita que {id:int} sea un n\u00famero y {name:str} una cadena.</p>"},{"location":"en/dynamic-routes/#example-1","title":"Example #1","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/test/10/user/dxs\")\n\n@app.page(route=\"/test/{id:int}/user/&lt;name:str&gt;\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy, id:int, name:str):\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\", size=50),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"en/dynamic-routes/#example-2","title":"Example #2","text":"<p>Available only up to version 0.2.4</p> <p>Use dynamic parameters in the url to get specific data, for example <code>{id:d}</code> is requested to be a number and <code>{name:l}</code> a string. For more information here</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/test/10/user/dxs\")\n\n@app.page(route=\"/test/{id:d}/user/{name:l}\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy, id:int, name:str):\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\", size=50),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"en/dynamic-routes/#demo_1","title":"\ud83c\udfac Demo","text":""},{"location":"en/dynamic-routes/#custom-validation","title":"Custom validation","text":"Available from version 0.2.6 <ul> <li>The typing of parameters within the url changes, now supporting the native python types <code>(:int, :str, :bool, :float</code>), instead of using <code>(:d, :l)</code> which were for a number and string respectively.</li> <li>The function used in <code>custom_params</code> now only supports returning <code>None</code>, to say that the url does not match, since <code>False</code> can be interpreted as a <code>:bool</code> value and could match the url. Also you can return any value in case you want to accept the url.</li> </ul> <p>To control the validation of custom data in the dynamic path, you must use the <code>custom_params</code> parameter of the <code>page</code> decorator, in this you can enter the key and the value as a function, being a dictionary can support a wide variety of data, according to your imagination \ud83e\udd14.</p>"},{"location":"en/dynamic-routes/#example-1_1","title":"Example #1","text":"<pre><code>from uuid import UUID\nimport flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/test/10/user/dxs/a4cb5f2a-2281-4e66-85e4-441a40026357\"\n    )\n\ndef is_uuid(value:str):\n    try:\n        return UUID(value)\n    except ValueError:\n        return\n\n@app.page(\n    route=\"/test/{id:int}/user/{name:str}/{uuid:Uuid}\",\n    title=\"Flet-Easy\",\n    custom_params={\"Uuid\": is_uuid},\n)\ndef home_page(data: fs.Datasy, id: int, name: str, uuid: UUID):\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\\nUUID: {uuid}\", size=50),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"en/dynamic-routes/#example-2_1","title":"Example #2","text":"<p>Available only up to version 0.2.4</p> <pre><code>from uuid import UUID\nimport flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/test/10/user/dxs/a4cb5f2a-2281-4e66-85e4-441a40026357\"\n    )\n\ndef is_uuid(value:str):\n    try:\n        UUID(value)\n        return value\n    except ValueError:\n        return False\n\n@app.page(\n    route=\"/test/{id:d}/user/{name:l}/{uuid:Uuid}\",\n    title=\"Flet-Easy\",\n    custom_params={\"Uuid\": is_uuid},\n)\ndef home_page(data: fs.Datasy, id: int, name: str, uuid: str):\n    return ft.View(\n        controls=[\n            ft.Text(f\"ID: {id} \\nNAME: {name}\\nUUID: {uuid}\", size=50),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"en/dynamic-routes/#demo_2","title":"\ud83c\udfac Demo","text":""},{"location":"en/how-to-use/","title":"How to use","text":"<p><code>Flet-Easy</code> presents a structure according to how the user wants to adapt it, since it allows to have several files and connect them to a main file.</p> <ul> <li>To use <code>Flet-easy</code>, first we have to use the <code>FletEasy</code> class and create an object where to make the app configurations.</li> </ul>"},{"location":"en/how-to-use/#fleteasy","title":"FletEasy","text":"<p>We create the app object, in which you can configure:</p> <ul> <li><code>route_prefix</code> : The route that is different from <code>/</code>.</li> <li><code>route_init</code> : The initial route to initialize the app, by default is <code>/</code>.</li> <li><code>route_login</code> : The route that will be redirected when the app has route protectionconfigured.</li> <li><code>on_Keyboard</code> : Enables the on_Keyboard event, by default it is disabled (False). [<code>See more</code>]</li> <li><code>on_resize</code> : Triggers the on_resize event, by default it is disabled (False). [<code>See more</code>]</li> <li><code>secret_key</code> : Used with <code>SecretKey</code> class of FletEasy, to configure JWT or client storage. [<code>See more</code>]</li> <li><code>path_views</code> : Configuration of the folder where are the .py files of the pages, you use the <code>Path</code> class to configure it. [<code>See more</code>]</li> </ul>"},{"location":"en/how-to-use/#demo","title":"\ud83d\udcf7 Demo","text":""},{"location":"en/how-to-use/#example","title":"Example","text":"<pre><code>import flet_easy as fs\n\napp = fs.FletEasy(\n    route_prefix='/FletEasy',\n    route_init='/FletEasy/home',\n)\n</code></pre>"},{"location":"en/how-to-use/#methods","title":"Methods","text":"<ul> <li><code>run()</code> : Execute the app. Soporta async, fastapi y export_asgi_app. [<code>See more</code>]</li> <li><code>add_middleware()</code> : Requires a list of functions, the function that will act as middleware will receive as a single mandatory parameter [data:Datasy] and its structure or content may vary depending on the context and the specific requirements of the middleware. [<code>See more</code>]</li> <li><code>add_pages()</code> : Add pages from other archives. In the list you enter objects of class AddPagesy from other .py files. [<code>See more</code>]</li> <li><code>add_routes()</code> : Add routes without the use of decorators. [<code>See more</code>]</li> </ul>"},{"location":"en/how-to-use/#decorators","title":"Decorators","text":"<ul> <li><code>page()</code> : Decorator to add a new page to the app. This decorator method acts similarly to the <code>Pagesy</code> class and contains the same required parameters. [<code>See more</code>]</li> <li><code>config</code> : Decorator to add a custom configuration to the app. [<code>See more</code>]</li> <li><code>login</code> : Decorator to add a login configuration to the app (protected_route). [<code>See more</code>]</li> <li><code>page_404()</code> : Decorator to add a new custom page when not finding a route in the app. [<code>See more</code>]</li> <li><code>view</code> : Decorator to add custom controls to the application, the decorator function will return the <code>Viewsy</code>. Which will be obtained in functions with <code>data:fs.Datasy</code> parameter and can be added to the page view decorated with <code>data.view</code>. [<code>See more</code>]</li> <li><code>config_event_handler</code>: Decorator to add flet page event configurations. [<code>See more</code>]</li> </ul>"},{"location":"en/how-to-use/#how-to-create-a-new-page","title":"How to create a new page?","text":"<p>To create a new page you use a decorator that provides the object created by the <code>FletEasy</code> class, which is <code>page</code> that allows you to enter certain parameters.</p>"},{"location":"en/how-to-use/#decorator-page","title":"Decorator <code>page</code>","text":"<p>To add pages, the following parameters are required:</p> <ul> <li><code>route</code>: text string of the url, for example(<code>'/FletEasy'</code>).</li> <li><code>title</code>: Defines the title of the page.</li> <li><code>page_clear</code>: Removes the pages from the <code>page.views</code> list of flet (optional).</li> <li><code>share_data</code> : Is a boolean value, useful if you want to share data between pages, in a morerestricted way (optional). [<code>See more</code>]</li> <li><code>protected_route</code>: Protects the page path, according to the <code>login</code> decorator configurationof the <code>FletEasy</code> class (optional). [<code>See more</code>]</li> <li><code>custom_params</code>: To add parameter validation in the custom url using a dictionary, where thekey is the parameter validation name and the value is the custom function that should report aboolean value. [<code>See more</code>]</li> <li><code>middleware</code> : Acts as an intermediary between different software components, intercepting andprocessing requests and responses. They allow adding functionalities to an application in aflexible and modular way.  It can be used in the app in general, as well as in each of thepages (optional). [<code>See more</code>]</li> </ul>"},{"location":"en/how-to-use/#example_1","title":"Example","text":"<pre><code>import flet_easy as fs\nimport flet as ft\n\napp = fs.FletEasy(\n    route_prefix='/FletEasy',\n    route_init='/FletEasy/home',\n)\n\n@app.page(route=\"/home\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n            ft.FilledButton(\n                \"go Home\",\n                on_click=data.go(f\"{data.route_prefix}/dashboard\")\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\")\ndef dashboard_page(data: fs.Datasy):\n    page = data.page\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n            ft.FilledButton(\n                \"go Home\",\n                on_click=data.go(data.route_init)\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"en/how-to-use/#datasy-data","title":"Datasy (data)","text":"Available since version 0.2.4 <ul> <li><code>history_routes</code> : Get the history of the routes.</li> <li><code>go_back()</code> : Method to go back to the previous route.</li> </ul> <p>The decorated function will always receive a parameter which is <code>data</code> (can be any name), which will make an object of type <code>Datasy</code> of <code>Flet-Easy</code>.</p> <p>This class has the following attributes, in order to access its data:</p> <ul> <li><code>page</code> : We get the values of the page provided by <code>Flet</code> .</li> <li><code>url_params</code> : We obtain a dictionary with the values passed through the url.</li> <li><code>view</code> : Get a <code>View</code> object from <code>Flet</code>, previouslyconfigured with the <code>View</code> decorator of <code>Flet-Easy</code>.</li> <li><code>route_prefix</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>route_init</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> <li><code>route_login</code> : Value entered in the <code>FletEasy</code> class parameters to create the app object.</li> </ul> <ul> <li><code>share</code> : It is used to be able to store and to obtain values in the client session, theutility is to be able to have greater control in the pages in which it is wanted to share, forit the parameter <code>share_data</code> of the <code>page</code> decorator must be used. The methods to use aresimilar <code>page.session</code>. [<code>See more</code>] Besides that you get some extra methods:</li> <li><code>contains</code> : Returns a boolean, it is useful to know if there is shared data.</li> <li><code>get_values</code> : Get a list of all shared values.</li> <li><code>get_all</code> : Get the dictionary of all shared values.</li> </ul> <ul> <li><code>on_keyboard_event</code> : get event values to use in the page. [<code>See more</code>]</li> <li><code>on_resize</code> : get event values to use in the page. [<code>See more</code>]</li> <li><code>route</code> : route provided by the route event, it is useful when using middlewares to check if the route is assecible.</li> <li><code>history_routes</code> : Get the history of the routes.</li> </ul>"},{"location":"en/how-to-use/#methods_1","title":"Methods","text":"<ul> <li><code>logout()</code> : method to close sessions of all sections in the browser (client storage), requires as parameter the key or the control (the key parameter of the control must have the value to delete), this is to avoid creating an extra function. [<code>See more</code>]</li> <li><code>login()</code> : Method to create sessions of all sections in the browser (client storage), requires as parameters the key and the value, the same used in the <code>page.client_storage.set</code> method. [<code>See more</code>]</li> <li><code>go()</code> : Method to change the application path (recommended to use this instead of <code>page.go</code> to avoid path errors).</li> <li><code>redirect()</code> : To redirect to a path before the page is loaded, it is used in middleware.</li> <li><code>go_back()</code> : Method to go back to the previous route.</li> </ul> <p>Tip</p> <p>Now <code>page.go()</code> and <code>data.go()</code> work similarly to go to a page (<code>View</code>), the only difference is that <code>data.go   ()</code> checks for url redirects when using <code>data.redirect()</code>.</p> <p>logaut and login</p> <p>Compatible with android, ios, windows and web.</p>"},{"location":"en/how-to-use/#demo_1","title":"\ud83c\udfac Demo","text":""},{"location":"en/installation/","title":"Installation","text":"<p>Info</p> <p>In version 0.1.3 from now on it requires installing <code>flet</code> separately, in previous versions it is installed by default.</p> <pre><code>pip install flet\n</code></pre> <p>To install flet-easy just copy this into your terminal after having already installed <code>python &gt;= 3.8</code></p> <pre><code>pip install flet-easy\n</code></pre>"},{"location":"en/installation/#ways-to-install","title":"Ways to install","text":"<p>Available from version 0.2.4\"</p> <p>Flet-Easy provides several ways to install. This allows you to use dependencies that must be used, avoiding unnecessary things when building your application, allowing better control.</p>"},{"location":"en/installation/#install-flet-easy-complete","title":"Install Flet-Easy Complete","text":"<p>Note</p> <p>If you use the <code>fs</code> cli, it is important to have <code>git</code> installed.</p> <p>Installs all the dependencies to use, you can use all the functionalities provided by Flet-Easy</p> <pre><code>pip install flet-easy[all]\n</code></pre>"},{"location":"en/installation/#install-clean-flet-easy","title":"Install clean Flet-Easy","text":"<p>Tip</p> <p>Recommended for <code>Flet</code> Packaging Application.</p> <p>Requires installation of Flet &gt;= 0.21.</p> <pre><code>pip install flet&gt;=0.21\n</code></pre>"},{"location":"en/installation/#if-you-do-not-use-cli-to-create-app","title":"If you do not use: <code>[CLI-to-create-app]</code>","text":"<pre><code>pip install flet-easy\n</code></pre>"},{"location":"en/installation/#install-flet-easy-if-you-need-to-use-basic-jwt","title":"Install Flet-Easy if you need to use <code>[Basic-JWT]</code>","text":"<pre><code>pip install flet-easy[JWT]\n</code></pre>"},{"location":"en/middleware/","title":"Middleware","text":"<p>It acts as an intermediary between different software components, intercepting and processing requests and responses. Allows adding functionalities before reloading each page in a flexible and modular way. It adds common functionalities, such as authentication, logging, data compression, caching, error handling, data transformation, etc.</p> <p>The function that will act as middleware will receive as a single mandatory parameter <code>data: Datasy</code> and its structure or content may vary depending on the context and specific requirements of the middleware.</p>"},{"location":"en/middleware/#method-and-attribute-to-use-see-more","title":"Method and attribute to use [<code>See more</code>]","text":"<ul> <li><code>data.route</code> : to know the route that is loading.</li> <li><code>data.redirect()</code> : route to redirect.</li> </ul> <p>Note</p> <p>If the function returns None, it will not prevent the page from loading that the route is accessing.</p> <p>Info</p> <p>Several functions can be used at the same time in the Middleware, since a list of functions is entered.</p>"},{"location":"en/middleware/#general-application","title":"General Application","text":"<p>Another alternative to protected-route</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/login\", route_login=\"/login\")\n\ndb = []  # Database\n\n# -------------------------------------------------------------------------------\n\n\n# Customized middleware\nasync def login_middleware(data: fs.Datasy):\n    \"\"\" If the path is '/login', it will return the None function,\n    which will not prevent access to the page. \"\"\"\n    if data.route == \"/login\":\n        return\n\n    username = await data.page.client_storage.get_async(\"login\")\n    if username is None or username not in db:\n        return data.redirect(\"/login\")\n\n\n# Middleware that runs in general, i.e. every time you load a page.\napp.add_middleware([login_middleware])\n# -------------------------------------------------------------------------------\n\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\")\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"go Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\n# -------------------------------------------------------------------------------\n\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # create login stored user\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated databas\n\n        \"\"\"First the values must be stored in the browser, then in the\n        login decorator the value must be retrieved through the key used\n        and then validations must be used.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dashboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\napp.run()\n</code></pre>"},{"location":"en/middleware/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/middleware/#for-each-page","title":"For each page","text":"<p>Another alternative to protected-route</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/login\", route_login=\"/login\")\n\ndb = []  # Database\n\n# -------------------------------------------------------------------------------\n\n# Customized middleware\nasync def login_middleware(data: fs.Datasy):\n    username = await data.page.client_storage.get_async(\"login\")\n    if username is None or username not in db:\n        return data.redirect(\"/login\")\n\n# -------------------------------------------------------------------------------\n# Middleware used to load this page\n@app.page(route=\"/dashboard\", title=\"Dashboard\", middleware=[login_middleware])\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"go Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# -------------------------------------------------------------------------------\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # create login stored user\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated databas\n\n        \"\"\"First the values must be stored in the browser, then in the\n        login decorator the value must be retrieved through the key used\n        and then validations must be used.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dashboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"en/middleware/#demo_1","title":"\ud83c\udfac Demo","text":""},{"location":"en/ref/","title":"Ref","text":"<p>Similar to <code>Ref</code> of <code>Flet</code>, with the only difference being that to access the referenced control, use the property <code>Ref.current</code> to <code>Ref.c</code></p> <p>Info</p> <p>It can be useful when we create components and we want to reference the controllers to be able to handle events in the component.</p>"},{"location":"en/ref/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy()\n\n@app.page(route=\"/\", title=\"Use fs.Ref\")\ndef index_page(data: fs.Datasy):\n    first_name = fs.Ref[ft.TextField]()\n    last_name = fs.Ref[ft.TextField]()\n    greetings = fs.Ref[ft.Column]()\n\n    def btn_click(e):\n        greetings.current.controls.append(\n            ft.Text(f\"Hello, {first_name.current.value} {last_name.current.value}!\")\n        )\n        first_name.c.value = \"\"\n        last_name.c.value = \"\"\n        data.page.update()\n        first_name.c.focus()\n\n    return ft.View(\n        controls=[\n            ft.TextField(ref=first_name, label=\"First name\", autofocus=True),\n            ft.TextField(ref=last_name, label=\"Last name\"),\n            ft.ElevatedButton(\"Say hello!\", on_click=btn_click),\n            ft.Column(ref=greetings),\n        ]\n    )\n\napp.run()\n</code></pre>"},{"location":"en/responsiveControlsy/","title":"ResponsiveControlsy","text":"<p>Allows the controls to adapt to the size of the app (responsive). It is suitable for use in applications, in web it is not recommended.</p> <p>Note</p> <p>Avoid activating scroll outside ResponseControl.</p> <p>This class contains the following parameters:</p> <ul> <li><code>content: Control</code> : Contains a control of flet.</li> <li><code>expand: int</code> : To specify the space that will contain the content controller in the app, 1 equals the whole app.</li> <li><code>resize_interval: int</code> : To specify the response time (optional).</li> <li><code>on_resize: callable</code> : Custom function to be executed when the app is resized (optional).</li> <li><code>show_resize: bool</code> : To observe the size of the controller (width x * height). is disabled when sending an on_resize function. (optional)</li> <li><code>show_resize_terminal: bool</code> : To see the size of the controller (width x height) in the terminal. (optional)</li> </ul>"},{"location":"en/responsiveControlsy/#example","title":"Example","text":"<pre><code>import flet_easy as fs\n\nfs.ResponsiveControlsy(\n    content=ft.Container(\n        content=ft.Text(\"on_resize\"),\n        bgcolor=ft.colors.RED,\n        alignment=ft.alignment.center,\n        height=100\n    ),\n    expand=1,\n    show_resize=True\n)\n</code></pre>"},{"location":"en/responsiveControlsy/#advanced-use","title":"Advanced use","text":"<pre><code>import flet as ft\nimport flet_easy as fs\nfrom flet.canvas import CanvasResizeEvent\n\napp = fs.FletEasy(\n    route_init=\"/response\"\n)\n\nclass ResponseTest(ft.UserControl):\n    def __init__(self):\n        super().__init__()\n\n    def build(self):\n        return ft.Row(\n            controls=[\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Text(\"W x H\"),\n                        bgcolor=ft.colors.GREEN_400,\n                        alignment=ft.alignment.center,\n                    ),\n                    expand=1,\n                    show_resize=True,\n                ),\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Row(\n                            controls=[\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Column(\n                                            controls=[\n                                                ft.Container(\n                                                    bgcolor=ft.colors.DEEP_ORANGE_50,\n                                                    height=170,\n                                                    margin=5,\n                                                ),\n                                                ft.Container(\n                                                    bgcolor=ft.colors.BLACK87,\n                                                    height=170,\n                                                    margin=5\n                                                ),\n                                            ],\n                                            scroll=ft.ScrollMode.HIDDEN,\n                                            spacing=0,\n                                        ),\n                                        bgcolor=ft.colors.BROWN_500,\n                                        expand=True,\n                                        margin=ft.Margin(5, 5, 0, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n                                ),\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Text(\n                                            \"ok\",\n                                        ),\n                                        bgcolor=ft.colors.CYAN_500,\n                                        alignment=ft.alignment.center,\n                                        margin=ft.Margin(0, 5, 5, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n                                ),\n                            ],\n                            expand=1,\n                            spacing=0,\n                        ),\n                        bgcolor=ft.colors.AMBER_600,\n                        alignment=ft.alignment.center,\n                    ),\n                    show_resize=True,\n                    expand=3,\n                ),\n            ],\n            expand=2,\n        )\n\n@app.page(route=\"/response\")\ndef response_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Response\"\n\n    def handle_resize(e: CanvasResizeEvent):\n        c = e.control.content\n        t = c.content\n        t.value = f\"{e.width} x {e.height}\"\n        page.update()\n\n    return ft.View(\n        controls=[\n            fs.ResponsiveControlsy(\n                content=ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.RED,\n                    alignment=ft.alignment.center,\n                    height=100,\n                ),\n                expand=1,\n                show_resize=True,\n            ),\n            fs.ResponsiveControlsy(\n                ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.BLUE,\n                    alignment=ft.alignment.center\n                ),\n                on_resize=handle_resize,\n                expand=1,\n            ),\n            fs.ResponsiveControlsy(\n                content=ResponseTest(),\n                expand=2\n                )\n        ],\n    )\n\napp.run()\n</code></pre>"},{"location":"en/responsiveControlsy/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/run-the-app/","title":"Run the app","text":"<p>To run the application we use an object method already instantiated by <code>FletEasy</code> (you can customize the parameters of method according to your needs):</p>"},{"location":"en/run-the-app/#methods","title":"Methods","text":""},{"location":"en/run-the-app/#run","title":"run","text":""},{"location":"en/run-the-app/#use-with-fastapi","title":"Use with fastapi","text":"<p>To get the main of the app and be able to add Fastapi to it.</p> <p></p>"},{"location":"en/run-the-app/#export-asgi-app","title":"Export asgi app","text":""},{"location":"en/run-the-app/#customize-as-it-is-executed","title":"customize as it is executed","text":"<p>If there are problems in <code>build web</code></p> <p>Use: <pre><code>import flet as ft\n\nft.app(app.run(fastapi=True))\n</code></pre></p>"},{"location":"en/working-with-other-apps/","title":"Working with other apps","text":""},{"location":"en/working-with-other-apps/#working-with-other-apps-and-creating-apis","title":"Working with other apps and creating apis","text":"<p>To be able to make our main app work with other apps, besides being able to create apis from the same url path with the same host and port. First we must obtain the main of the app to be able to mount it in another app. For it we are going to use the <code>run</code> method with its <code>fastapi=True</code> parameter.</p> <p>More information</p> <ul> <li>Here</li> </ul>"},{"location":"en/working-with-other-apps/#example","title":"Example","text":"main.py<pre><code>import flet as ft\nimport flet_easy as fs\nfrom flet import fastapi\n\napp = fs.FletEasy(\n    route_init=\"/Flet-Easy\",\n)\n\n@app.page(route=\"/Flet-Easy\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# We create an app in FastApi\napp_main = fastapi.FastAPI()\n\n# Creating a basic test api.\n@app_main.get(\"/testing\")\ndef test_api():\n    return {\"success\": True}\n\n# We add the `flet` app to `fastapi`.\napp_main.mount(\"/\", fastapi.app(app.run(fastapi=True)))\n</code></pre>"},{"location":"en/working-with-other-apps/#run-the-app","title":"Run the app","text":"<pre><code>uvicorn main:app_main\n</code></pre>"},{"location":"en/working-with-other-apps/#demo","title":"\ud83d\udcf7 Demo","text":""},{"location":"en/add-pages/by-means-of-functions/","title":"By means of functions","text":""},{"location":"en/add-pages/by-means-of-functions/#adding-pages-to-the-main-app-without-using-decorators","title":"Adding pages to the main app without using decorators","text":"<p>For this we will require the <code>add_routes</code> method of the object created by the <code>FletEasy</code> class.</p> <p>Soporta async</p>"},{"location":"en/add-pages/by-means-of-functions/#app-structure","title":"App structure","text":""},{"location":"en/add-pages/by-means-of-functions/#example-using-functions","title":"Example using functions","text":"index.py<pre><code>import flet_easy as fs\nimport flet as ft\n\ndef page_index(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text('Index'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre>"},{"location":"en/add-pages/by-means-of-functions/#example-using-classes","title":"Example using classes","text":"<p>Available since version 0.2.4</p> More information <p>Create new pages (<code>View</code>) by using classes, you don't need to inherit from any other class to add the page, you just need to:</p> <ul> <li>The constructor must have as mandatory parameter <code>data:fs.Datasy</code> and if it receives a parameter bymeans of the url it must be used as parameter.</li> <li>That the class to use must have a mandatory method called <code>build</code> that will return <code>View</code> from flet, itcan     be async if necessary. This <code>build</code> method does not receive any    parameter.</li> </ul> <p>\ud83e\udd14 why use a class?</p> <p>The class can have several benefits, such as inheritance which is useful to avoid repeating code, among others.</p> test.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nclass PageTest:\n    def __init__(self, data:fs.Datasy, id:int, name:str):\n        self.data = data\n        self.id = id\n        self.name = name\n\n    def build(self):\n        return ft.View(\n            controls=[\n                ft.Text('Text'),\n                ft.Text(f'Id: {self.id}'),\n                ft.Text(f'Name: {self.name}'),\n                ft.FilledButton(\n                            \"Go index\",\n                            on_click=self.data.go(\"/index\"),\n                        ),\n            ],\n            vertical_alignment=\"center\",\n            horizontal_alignment=\"center\"\n    )\n</code></pre>"},{"location":"en/add-pages/by-means-of-functions/#add-routes","title":"Add routes","text":"<p>We import the functions or classes from the <code>views</code> folder, then we use the <code>add_routes</code> method of the FletEasy instance, in which we will add a list of <code>Pagesy</code> classes where we will configure the routes and the functions or classes to be used in addition to others.</p> main.py<pre><code># Import functions from a `views` folder\nfrom views.user import users\nfrom views.index import page_index\nfrom views.test import PageTest\nimport flet_easy as fs\n\n# Add routes without the use of decorators\napp.add_routes(add_views=[\n    fs.Pagesy('/index', page_index, tilte='index'),\n    fs.Pagesy('/user/task', users, tilte='users'),\n    fs.Pagesy(\n              '/test/{id:d}/user/{name:l}',\n              PageTest,\n              title='test counter',\n              protected_route=True\n            ),\n])\n</code></pre>"},{"location":"en/add-pages/by-means-of-functions/#pagesy","title":"Pagesy","text":"<p>\ud83d\udcd1 The class <code>Pagesy</code>, it requires the following parameters:</p> <ul> <li><code>route</code>: text string of the url, for example(<code>'/index'</code>).</li> <li><code>view</code>: Stores the page function.</li> <li><code>title</code> : Define the title of the page.</li> <li><code>clear</code>: Removes the pages from the <code>page.views</code> list of flet. (optional)</li> <li><code>share_data</code> : It is a boolean value, which is useful if you want to share data between pages, in a morerestricted way. (optional) [<code>See more</code>]</li> <li><code>protected_route</code>: Protects the route of the page, according to the configuration of the <code>login</code> decoratorof the <code>FletEasy</code> class. (optional) [<code>See more</code>]</li> <li><code>custom_params</code>: To add validation of parameters in the custom url using a dictionary, where the key is the nameof the parameter validation and the value is the custom function that must report a boolean value. [<code>See more</code>]</li> <li><code>middleware</code> : It acts as an intermediary between different software components, intercepting andprocessing requests and responses. They allow adding functionalities to an application in a flexible andmodular way. (optional) [<code>See more</code>]</li> </ul>"},{"location":"en/add-pages/in-automatic/","title":"In automatic","text":"<p>It forgets the imports of each of the .py files and the functions or variables of the pages. For this you must have a proper order where all the .py files that contain each page must be in a folder, for example <code>views</code>. The configuration is done in the <code>FletEasy</code> class of the <code>path_views</code> parameter and in each of the .py files use the <code>AddPages</code> class.</p>"},{"location":"en/add-pages/in-automatic/#app-structure","title":"App structure","text":""},{"location":"en/add-pages/in-automatic/#example","title":"Example","text":"user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nusers = fs.AddPagesy(\n    route_prefix='/user'\n)\n\n# -&gt; Urls to be created:\n# * '/user/task'\n# * '/user/information'\n\n@users.page('/task', title='Task')\ndef task_page(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text('Task'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n\n@users.page('/information', title='Information')\nasync def information_page(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text('Information'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre> <p>The <code>main.py</code> file will automatically recognize the pages created in each of the .py files in the <code>views</code> folder.</p> main.py<pre><code>import flet_easy as fs\nfrom pathlib import Path\n\napp = fs.FletEasy(\n    route_init='/user/task',\n    path_views=Path(__file__).parent / \"views\",\n)\n\napp.run()\n</code></pre>"},{"location":"en/add-pages/through-classes/","title":"Through classes","text":"<p>Available since version 0.2.4</p> <p>Create new pages (<code>View</code>) by using classes, you don't need to inherit from any other class to add the page, you just need to:</p> <ul> <li>Use the <code>page</code> decorator.</li> <li>The constructor must have as mandatory parameter <code>data:fs.Datasy</code> and if it receives a parameter bymeans of the url it must be used as parameter.</li> <li>That the class to use must have a mandatory method called <code>build</code> that will return <code>View</code> from flet, itcan be async if necessary. This <code>build</code> method does not receive any parameter.</li> </ul> <p>\ud83e\udd14 why use a class?</p> <p>The class can have several benefits, such as inheritance which is useful to avoid repeating code, among others.</p> <p>Soporta async</p>"},{"location":"en/add-pages/through-classes/#example","title":"Example","text":"main.py<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/page-1\",\n)\n\n# ----------------- Custom class for multiple pages to use --------------------\nclass Custom:\n    def __init__():\n        pass\n\n    def custom_appbar(self):\n        return ft.AppBar(\n            title=ft.Text(\"App\"),\n            actions=[\n                ft.Row(\n                    controls=[\n                        ft.FilledButton(\n                            \"Page 1\",\n                            on_click=self.data.go(\"/page-1\"),\n                            style=ft.ButtonStyle(\n                                bgcolor=ft.colors.RED_600,\n                            ),\n                        ),\n                        ft.FilledButton(\n                            \"Page 2\",\n                            on_click=self.data.go(\"/page-2/100\"),\n                            style=ft.ButtonStyle(\n                                bgcolor=ft.colors.AMBER_500,\n                            ),\n                        ),\n                    ]\n                )\n            ],\n        )\n\n# -------------------------------- Add page 1 --------------------------------\n@app.page(route=\"/page-1\", title=\"Page 1\")\nclass Page1(Custom):\n    def __init__(self, data: fs.Datasy):\n        self.data = data\n\n    def build(self):\n        return ft.View(\n            controls=[ft.Text(\"Page 1\", size=50)],\n            appbar=self.custom_appbar(),\n            vertical_alignment=\"center\",\n            horizontal_alignment=\"center\",\n        )\n\n# -------------------------------- Add page 2 --------------------------------\n@app.page(route=\"/page-2/{id}\", title=\"Page 2\")\nclass Page2(Custom):\n    def __init__(self, data: fs.Datasy, id: int):\n        self.data = data\n        self.id = id\n\n    def build(self):\n        return ft.View(\n            controls=[ft.Text(f\"Page 2: \\nID-URL = {self.id}\", size=50)],\n            appbar=self.custom_appbar(),\n            vertical_alignment=\"center\",\n            horizontal_alignment=\"center\",\n        )\n\napp.run()\n</code></pre>"},{"location":"en/add-pages/through-classes/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/add-pages/through-decorators/","title":"Through decorators","text":""},{"location":"en/add-pages/through-decorators/#add-pages-from-other-files-to-the-main-application","title":"Add pages from other files to the main application","text":"<p>In order to create a page in a <code>file.py</code> different from the <code>main.py</code> file of the app, you need to use the <code>AddPagesy</code> class.</p>"},{"location":"en/add-pages/through-decorators/#addpagesy","title":"<code>AddPagesy</code>","text":"<p>Requires the parameter:</p> <ul> <li><code>route_prefix</code>: text string that will bind to the url of the page decorator, example(/users) this will encompass all urls of this class. (optional)</li> </ul> <p>Methods:</p> <ul> <li><code>page()</code> : Decorator to add a new page to the app. This decorator method acts similarly to the <code>Pagesy</code> class and contains the same required parameters. (<code>See more</code>)</li> </ul> <p>Soporta async</p>"},{"location":"en/add-pages/through-decorators/#app-structure","title":"App structure","text":"Urls to be created: <ul> <li><code>'/user/task'</code></li> <li><code>'/user/information'</code></li> <li><code>'/user/test'</code></li> </ul>"},{"location":"en/add-pages/through-decorators/#example-using-functions","title":"Example using functions","text":"user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nusers = fs.AddPagesy(\n    route_prefix='/user'\n)\n\n# -&gt; Urls to be created:\n# * '/user/task'\n# * '/user/information'\n# * '/user/test'\n\n@users.page('/task', title='Task')\ndef task_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text('Task'),\n            ft.FilledButton(\n                            \"Go Information\",\n                            on_click=data.go(\"/users/information\"),\n                        ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n\n@users.page('/information', title='Information')\nasync def information_page(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text('Information'),\n            ft.FilledButton(\n                            \"Go Test\",\n                            on_click=data.go(\"/users/test\"),\n                        ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre>"},{"location":"en/add-pages/through-decorators/#example-using-classes","title":"Example using classes","text":"<p>Available since version 0.2.4</p> <p>Create new pages (<code>View</code>) by using classes, you don't need to inherit from any other class to add the page, you just need to:</p> <ul> <li>Use the <code>page</code> decorator.</li> <li>The constructor must have as mandatory parameter <code>data:fs.Datasy</code> and if it receives a parameter bymeans of the url it must be used as parameter.</li> <li>That the class to use must have a mandatory method called <code>build</code> that will return <code>View</code> from flet, itcan be async if necessary. This <code>build</code> method does not receive any parameter.</li> </ul> <p>\ud83e\udd14 why use a class?</p> <p>The class can have several benefits, such as inheritance which is useful to avoid repeating code, among others.</p> <p>\ud83d\udc40 Continuing with the previous code..</p> user.py<pre><code>@users.page('/test', title='test')\nClass TestPage:\n    def __init__(self, data:ft.Datasy):\n        self.data = data\n\n    async def build(self):\n        return ft.View(\n            controls=[\n                ft.Text('Test'),\n                ft.FilledButton(\n                    \"Go Task\",\n                    on_click=self.data.go(\"/users/task\"),\n                ),\n            ],\n            vertical_alignment=\"center\",\n            horizontal_alignment=\"center\"\n        )\n</code></pre>"},{"location":"en/add-pages/through-decorators/#adding-pages","title":"Adding pages","text":"<p>Now how to add to the main app the <code>main.py</code> file. For this we use the <code>add_pages</code> method that requires as parameter a list of all the pages of other files that we want to add.</p> main.py<pre><code>import flet_easy as fs\nfrom views.user import users\n\napp = fs.FletEasy(\n    route_init='/user/task',\n)\n\napp.add_pages([users])\n\napp.run()\n</code></pre>"},{"location":"en/add-pages/through-decorators/#without-instantiating-addpagesy","title":"without instantiating <code>AddPagesy</code>","text":"<p>Available since version 0.2.7</p> <p>Add page without creating an instance of <code>AddPagesy</code> class. For this the <code>@fs.page()</code> decorator is used, Useful if you don't need to share part of the URLs between pages</p>"},{"location":"en/add-pages/through-decorators/#example","title":"Example","text":"<p>It is important to set <code>path_views</code> for it to work properly</p> main.py<pre><code>import flet_easy as fs\nfrom pathlib import Path\n\napp = fs.FletEasy(\n          route_init=\"/test\",\n          path_views=Path(__file__).parent / \"views\",\n)\n\napp.run()\n</code></pre> <ul> <li><code>views</code> folder file</li> </ul> user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\n@fs.page(route=\"/test\")\ndef page_test(data:fs.Datasy):\n      return ft.View(\n             controls=[\n                 ft.Text(\"Test use\")\n             ]\n     )\n</code></pre>"},{"location":"en/customized-app/control-view-configuration/","title":"Control view configuration","text":""},{"location":"en/customized-app/control-view-configuration/#add-settings-of-the-view-controller-of-flet","title":"Add settings of the <code>View</code> controller of Flet","text":"<p>Which can be reused in each of the pages through the <code>data:fs.Datasy</code> parameter in the <code>page</code> decorator function of the app.</p> <p>Decorator <code>view</code> to add custom controls to the app, the decorator function will return the <code>Viewsy</code> class from FletEasy. Which will be obtained in functions with parameter <code>data:fs.Datasy</code> and can be added to the page view decorated with <code>page</code> of the FletEasy class.</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>.</li> <li>Add universal controls to use in more than one page in a simple way.</li> </ul>"},{"location":"en/customized-app/control-view-configuration/#example","title":"Example","text":"<p>We create an <code>AppBar</code> control of <code>Flet</code>, to be able to be reused in the other pages.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/home\")\n\n@app.view\ndef view(data: fs.Datasy):\n    return fs.Viewsy(\n        appbar=ft.AppBar(\n            title=ft.Text(\"AppBar Example\"),\n            center_title=False,\n            bgcolor=ft.colors.SURFACE_VARIANT,\n            actions=[\n                ft.PopupMenuButton(\n                    items=[\n                        ft.PopupMenuItem(\n                            text=\"\ud83d\udd25 Home\",\n                            on_click=data.go(data.route_init)\n                            ),\n                        ft.PopupMenuItem(\n                            text=\"\ud83d\udd25 Dasboard\",\n                            on_click=data.go(\"/dasboard\")\n                            ),\n                    ]\n                ),\n            ],\n        ),\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/home\", title=\"Flet-Easy\", page_clear=True)\ndef home_page(data: fs.Datasy):\n    # we obtain the values\n    view = data.view\n    # We can change the values of the appBar object, for example in title.\n    view.appbar.title = ft.Text(\"Home\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Home page\", size=50),\n        ],\n        appbar=view.appbar,  # We reuse control\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/dasboard\", title=\"Dasboard\")\ndef dasboard_page(data: fs.Datasy):\n    # we obtain the values\n    view = data.view\n    # We can change the values of the appBar object, for example in title.\n    view.appbar.title = ft.Text(\"Dasboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"Dasboard page\", size=50),\n        ],\n        appbar=view.appbar,  # We reuse control\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"en/customized-app/control-view-configuration/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/customized-app/events/","title":"Events","text":""},{"location":"en/customized-app/events/#configure-custom-events","title":"Configure custom events","text":"<p><code>config_event_handler</code> Decorator to add <code>Flet</code> event configurations. The decorated function must receive the [data:Datasy] parameter to be able to manipulate the app elements.</p>"},{"location":"en/customized-app/events/#example","title":"Example","text":"<ul> <li>Handle the event when the app is disconnected</li> </ul> <pre><code>@app.config_event_handler\ndef event_handler(data: fs.Datasy):\n    page = data.page\n\n    def on_disconnect(e):\n        print(\"Disconnect test application\")\n\n    page.on_disconnect = on_disconnect\n</code></pre>"},{"location":"en/customized-app/general-settings/","title":"General settings","text":"<p>This is achieved through the <code>page</code> value provided by <code>Flet</code>. For this you have to use the <code>config</code> decorator of the <code>Flet-Easy</code> object.</p> <p>Decorator to add a custom configuration to the app:</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>page:ft.Page</code>. Which can be used to make universal app configurations.</li> <li>The decorator function does not return anything.</li> </ul>"},{"location":"en/customized-app/general-settings/#example","title":"Example","text":"<p>In this example we change the page transitions</p> <pre><code>@app.config\ndef config(page: ft.Page):\n    theme = ft.Theme()\n    platforms = [\"android\", \"ios\", \"macos\", \"linux\", \"windows\"]\n    for platform in platforms:  # Removing animation on route change.\n        setattr(theme.page_transitions, platform, ft.PageTransitionTheme.NONE)\n\n    theme.text_theme = ft.TextTheme()\n    page.theme = theme\n</code></pre>"},{"location":"en/customized-app/page-404/","title":"Page 404","text":"<p>Which will be activated when a page (path) is not found. <code>page_404</code> Decorator to add a new custom page when not finding a route in the app, you need the following parameters :</p>"},{"location":"en/customized-app/page-404/#parameters","title":"parameters","text":"<ul> <li><code>route</code>: text string of the url, for example ('/FletEasy-404'). (optional).</li> <li><code>title</code> : Define the title of the page. (optional).</li> <li><code>clear_page</code>: remove the pages from the page.views list of flet. (optional)</li> </ul> <p>The decorated function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>.</p>"},{"location":"en/customized-app/page-404/#example","title":"Example","text":"<pre><code>@app.page_404('/FletEasy-404', title=\"Error 404\")\ndef page404(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text(f'Custom 404 error', size=30),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre>"},{"location":"en/customized-app/route-protection/","title":"Route protection","text":"<p>In order to configure the protection of routes, the <code>login</code> decorator of the created object of the app is used. The utility of this decorator is to obtain the values that we have previously registered in the <code>page.client_storage</code> (more details here), then you can perform validations with a database or any data manager used.</p> <p>Decorator to add a login configuration to the app (<code>protected_route</code>):</p> <ul> <li>The decorator function must receive a mandatory parameter, for example: <code>data:fs.Datasy</code>. Which can be used to get information and perform universal settings of the app.</li> <li>The decorator function must return a boolean.</li> </ul>"},{"location":"en/customized-app/route-protection/#example","title":"Example","text":"<p>In this case it is a basic example, with a test on a fictitious database.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\"\n    )\n\ndb = []  # Database\n\n@app.login\ndef login_x(data: fs.Datasy):\n    username = data.page.client_storage.get(\"login\")\n\n    \"\"\" We check if a value exists with the key login \"\"\"\n    if username is not None and username in db:\n        \"\"\"We verify if the username that is stored in the browser\n        is in the simulated database.\"\"\"\n        return True\n\n    return False\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\", protected_route=True)\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # We delete the key that we have previously registered\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # create login stored user\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # We add to the simulated database\n\n        \"\"\"First the values must be stored in the browser, then in the login\n        decorator the value must be retrieved through the key used and then\n        validations must be used.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dasboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"en/customized-app/route-protection/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/customized-app/route-protection/#login","title":"login","text":"<p>Registering in the client's storage the key and value in all browser sessions.</p> <p>Parameters <code>data.login</code>:</p> <ul> <li><code>key</code> : It is the identifier to store the value in the client storage.</li> <li><code>value</code> : Recommend to use a dict if you use JWT.</li> <li><code>next_route</code> : Redirect to next route after creating login.</li> <li><code>time_expiry</code> : Time to expire the session, use the <code>timedelta</code> class  to configure. (Optional) (JWT usage required)</li> <li><code>sleep</code> : Time to do login checks, default is 1s. (Optional) (JWT usage required)</li> </ul>"},{"location":"en/customized-app/route-protection/#logout","title":"logout","text":"<p>Closes the sessions of all browser tabs or the device used, which has been previously configured with the <code>login</code> method.</p> <p>Parameters <code>data.logout</code>:</p> <ul> <li><code>key</code> : It is the identifier to store the value in the client storage.</li> </ul>"},{"location":"en/events/keyboard-event/","title":"Keyboard event","text":"<p>In order to use this method, the parameter of the function decorated by <code>page</code> is obtained through <code>data</code>.</p> <p>Manages keyboard input of values</p>"},{"location":"en/events/keyboard-event/#methods","title":"Methods","text":"<ul> <li><code>add_control(function: Callable)</code> : Add a controller configuration (method of a class or function), which is executed with the <code>on_keyboard_event</code> event.</li> <li><code>key()</code> : returns the value entered by keyboard.</li> <li><code>shift()</code> : returns the value entered by keyboard.</li> <li><code>ctrl()</code> : returns the value entered by keyboard.</li> <li><code>alt()</code> : returns the keyboard input.</li> <li><code>meta()</code> : returns keyboard input.</li> <li><code>test()</code> : returns a message of all keyboard input values (key, Shift, Control, Alt, Meta).</li> </ul>"},{"location":"en/events/keyboard-event/#example","title":"Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/keyboard\",\n    on_Keyboard=True\n    )\n\n@app.page(route=\"/keyboard\", title=\"Use Keyboard\")\ndef keyboard_page(data: fs.Datasy):\n    page = data.page\n    on_keyboard = data.on_keyboard_event\n\n    use_keyboard = ft.Column()\n\n    def show_event():\n        use_keyboard.controls.append(ft.Text(on_keyboard.test()))\n        page.update()\n\n    # Add function to be executed by pressing the keyboard.\n    on_keyboard.add_control(show_event)\n\n    return ft.View(\n        controls=[\n            ft.Text(\n                \"Use Keyboard\",\n                size=30\n            ),\n            use_keyboard\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"en/events/keyboard-event/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"en/events/on-resize/","title":"On resize","text":"<p>In order to use this event, it is obtained from <code>data</code> of the function decorated by <code>page</code>.</p>"},{"location":"en/events/on-resize/#1-example","title":"1. Example","text":"<pre><code>@app.page(route=\"/resize\", title=\"Use Resize)\ndef resize_page(data:fs.Datasy):\n\n    # obtaining the values of the event.\n    on_resize = data.on_resize\n\n    return ft.View(\n        controls=[\n            ft.Text('Use Resize', size=30),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre> <p>When we get the values of the event, we can use the methods that this <code>on_resize</code> object has.</p> <ul> <li> <p><code>heightX(&lt;value&gt;)</code> : This method allows to obtain the values of the height of the page, which requires as parameter to enter an integer value from 1 to 100 (100 = 100%).</p> </li> <li> <p><code>widthX(&lt;value&gt;)</code> : This method is similar to the previous one in terms of page width.</p> </li> </ul> <p>Manipulation of the margin or padding of the page, this is important since it allows to use the previous methods correctly, that is to say the margin or padding of the page has to be <code>0</code> so that the previous methods work correctly, in the case that you want to put a margin, customized, you can correct it modifying in margin of <code>on_resize</code>.</p> <p>Note</p> <p>If the <code>AppBar</code> control is used, if the padding is 0, the <code>on_resize</code> margin must be 28 on the y-axis (platform dependent).</p> <ul> <li><code>margin_y</code> : Requires an integer value on the y-axis.</li> <li><code>margin_x</code> : Requires an integer value on the x-axis.</li> </ul>"},{"location":"en/events/on-resize/#2-example","title":"2. Example","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/resize\")\n\n@app.page(route=\"/resize\", title=\"Use resize\")\ndef resize_page(data:fs.Datasy):\n\n    # obtaining the values of the event.\n    on_resize = data.on_resize\n\n    # Modifying the customized margin.\n    # on_resize.margin_y = 10\n\n    return ft.View(\n        controls=[\n            ft.Container(\n                bgcolor=ft.colors.GREEN_600,\n                height=on_resize.heightX(50)\n            ),\n            ft.Container(\n                bgcolor=ft.colors.BLUE_600,\n                height=on_resize.heightX(50),\n                width=on_resize.widthX(50)\n            )\n        ],\n        vertical_alignment=\"center\",\n        spacing=0,\n        padding=0, # Customized padding\n    )\n\napp.run()\n</code></pre>"},{"location":"en/events/on-resize/#demo","title":"\ud83d\udcf7 Demo","text":""},{"location":"es/","title":"Descripci\u00f3n General del Framework Flet-Easy","text":""},{"location":"es/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Sistema de enrutamiento simplificado con tres enfoques diferentes</li> <li>Ayudantes para el manejo de eventos de Flet</li> <li>Protecci\u00f3n de rutas y autenticaci\u00f3n</li> <li>Soporte para middleware</li> <li>Soporte JWT para sesiones de autenticaci\u00f3n</li> <li>Herramienta CLI para estructurar proyectos</li> <li>Controles responsivos</li> <li>Compartir datos entre p\u00e1ginas</li> <li>P\u00e1ginas 404 personalizadas</li> <li>Manejo de eventos de teclado</li> <li>Manejo de eventos de redimensionamiento de p\u00e1gina</li> </ul>"},{"location":"es/#conceptos-clave","title":"Conceptos Clave","text":""},{"location":"es/#el-objeto-datasy","title":"El Objeto Datasy","text":"<p>Cada funci\u00f3n de p\u00e1gina recibe un par\u00e1metro <code>data</code> de tipo <code>Datasy</code> que proporciona:</p> <ul> <li>Acceso al objeto p\u00e1gina de Flet (<code>data.page</code>)</li> <li>Par\u00e1metros URL (<code>data.url_params</code>)</li> <li>Informaci\u00f3n de ruta (<code>data.route_prefix</code>, <code>data.route_init</code>)</li> <li>M\u00e9todos de navegaci\u00f3n (<code>data.go()</code>, <code>data.redirect()</code>)</li> <li>Gesti\u00f3n de sesiones (<code>data.share</code>, <code>data.login()</code>, <code>data.logout()</code>)</li> </ul>"},{"location":"es/#opciones-del-decorador-de-pagina","title":"Opciones del Decorador de P\u00e1gina","text":"<pre><code>@app.page(\n    route=\"/ejemplo\",            # Requerido: ruta URL\n    title=\"T\u00edtulo de P\u00e1gina\",    # T\u00edtulo de la p\u00e1gina\n    page_clear=False,           # Opcional: Limpiar pila de p\u00e1ginas\n    share_data=False,           # Opcional: Habilitar compartir datos\n    protected_route=False,      # Opcional: Requerir autenticaci\u00f3n\n    custom_params={},           # Opcional: Validaci\u00f3n personalizada de par\u00e1metros URL\n    middleware=[]               # Opcional: Middleware espec\u00edfico de p\u00e1gina\n)\n</code></pre>"},{"location":"es/#instalacion","title":"Instalaci\u00f3n","text":"<pre><code># Instalaci\u00f3n b\u00e1sica\npip install flet-easy\n\n# Instalaci\u00f3n completa con todas las caracter\u00edsticas\npip install flet-easy[all]\n\n# Solo soporte JWT\npip install flet-easy[JWT]\n</code></pre>"},{"location":"es/#notas-importantes","title":"Notas Importantes","text":"<ol> <li>Requiere Python &gt;= 3.8 y Flet &gt;= 0.21</li> <li>A partir de la versi\u00f3n 0.1.3, Flet debe instalarse por separado</li> <li>El framework soporta operaciones as\u00edncronas e integraci\u00f3n con FastAPI</li> <li>Compatible con despliegues en escritorio, m\u00f3vil y web</li> <li>Soporta empaquetado para distribuci\u00f3n usando el sistema de empaquetado de Flet</li> </ol>"},{"location":"es/#changelog","title":"Changelog","text":""},{"location":"es/#v020","title":"v0.2.0","text":"<ul> <li>Optimizaci\u00f3n del c\u00f3digo para <code>flet&gt;=0.21</code></li> <li>Correcci\u00f3n de async</li> <li>Enrutamiento autom\u00e1tico</li> <li>A\u00f1adido el par\u00e1metro <code>title</code> al decorador <code>page</code></li> <li>A\u00f1adido soporte <code>JWT</code> para sesiones de autenticaci\u00f3n en el par\u00e1metro de datos</li> <li>A\u00f1adido un <code>CLI</code> para crear una estructura de proyecto basada en el patr\u00f3n de dise\u00f1o MVC</li> <li>Soporte para Middleware</li> <li>A\u00f1adido control de Ref m\u00e1s simplificado</li> <li>Documentaci\u00f3n mejorada</li> <li>Integraci\u00f3n con Ruff</li> </ul>"},{"location":"es/#cambios-en-la-api","title":"Cambios en la API:","text":"<ul> <li>Los m\u00e9todos <code>async</code> han sido eliminados, ya que no son necesarios</li> <li>Cambio del m\u00e9todo <code>update_login</code> a <code>login</code> de Datasy</li> <li>Cambio del m\u00e9todo <code>logaut</code> a <code>logout</code> de Datasy</li> <li>Cambio del par\u00e1metro de funci\u00f3n decorado en <code>login</code> | <code>(page:ft.Page -&gt; data:fs:Datasy)</code></li> <li>Cambio del par\u00e1metro de funci\u00f3n decorado en <code>config_event_handler</code> | <code>(page:ft.Page -&gt; data:fs:Datasy)</code></li> </ul>"},{"location":"es/#021","title":"0.2.1","text":"<ul> <li>Corregido el problema de carga doble de p\u00e1gina</li> </ul>"},{"location":"es/#v022","title":"v0.2.2","text":"<ul> <li>Corregida la sensibilidad en url con letras may\u00fasculas</li> <li>Corregido el bot\u00f3n 'back' en la barra de aplicaciones de la p\u00e1gina del panel que no funcionaba</li> <li>Corregido error causado por <code>Timeout waiting invokeMethod</code></li> </ul>"},{"location":"es/#v024","title":"v0.2.4","text":"<ul> <li>\u26a1 La velocidad del router se mejora a m\u00e1s del doble de r\u00e1pido</li> <li>Formas de instalar Flet-Easy</li> <li>Soporte para el uso de clases para crear una vista</li> <li>Nuevo CLI de fs m\u00e1s responsivo</li> <li>Ahora <code>page.go()</code> y <code>data.go()</code> funcionan de manera similar para ir a una p\u00e1gina (<code>View</code>)</li> <li>Correcci\u00f3n de errores encontrados en cambios anteriores</li> <li>Nuevos m\u00e9todos a\u00f1adidos en Datasy (data):</li> <li><code>history_routes</code>: Obtener el historial de las rutas</li> <li><code>go_back</code>: M\u00e9todo para volver a la ruta anterior</li> </ul>"},{"location":"es/#v026","title":"v0.2.6","text":"<ul> <li>Corregido error de ruta p\u00e1gina 404</li> <li>A\u00f1adido verificador de ruta sin dependencia</li> </ul>"},{"location":"es/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>F\u00e1cil de usar (de ah\u00ed el nombre)</li> <li>Facilita el manejo de eventos de <code>flet</code></li> <li>Enrutamiento de p\u00e1ginas simple (Hay tres formas) para la que mejor se adapte a ti</li> <li>Construcci\u00f3n de aplicaciones con numerosas p\u00e1ginas y configuraciones personalizadas de flet para escritorio, m\u00f3vil y sitios web</li> <li>Proporciona una mejor construcci\u00f3n de tu c\u00f3digo, que puede ser escalable y f\u00e1cil de leer (se adapta a tus preferencias, no hay limitaciones)</li> <li>Enrutamiento din\u00e1mico, personalizaci\u00f3n en las rutas para mayor precisi\u00f3n en el env\u00edo de datos</li> <li>Protecci\u00f3n de rutas</li> <li>P\u00e1gina 404 personalizada</li> <li>Compartir datos controlados entre p\u00e1ginas</li> <li>Soporte as\u00edncrono</li> <li>Soporte de Middleware (en la aplicaci\u00f3n en general y en cada una de las p\u00e1ginas)</li> <li>Soporte JWT para sesiones de autenticaci\u00f3n en el par\u00e1metro de datos (\u00fatil para controlar el tiempo de sesiones)</li> <li>Trabajar con otras aplicaciones</li> <li>CLI para crear estructura de aplicaci\u00f3n <code>FletEasy</code> (<code>fs init</code>)</li> <li>F\u00e1cil integraci\u00f3n de <code>on_keyboard_event</code> en cada una de las p\u00e1ginas</li> <li>Usa el porcentaje del ancho y alto de la p\u00e1gina con <code>on_resize</code></li> <li>Control <code>ResponsiveControlsy</code> para hacer la aplicaci\u00f3n responsiva, \u00fatil para aplicaciones de escritorio</li> <li>Soporta empaquetado de aplicaciones para su distribuci\u00f3n</li> </ul>"},{"location":"es/#eventos-de-flet-que-maneja","title":"Eventos de Flet que maneja","text":"<ul> <li><code>on_route_change</code>: Enrutamiento din\u00e1mico</li> <li><code>on_view_pop</code></li> <li><code>on_keyboard_event</code></li> <li><code>on_resize</code></li> <li><code>on_error</code></li> </ul>"},{"location":"es/basic-jwt/","title":"JWT B\u00e1sico","text":"<p>JWT es un est\u00e1ndar para transmitir datos de forma segura entre partes en formato JSON. Se compone de tres partes: el encabezado, el payload y la firma. Se usa com\u00fanmente para autenticaci\u00f3n y autorizaci\u00f3n en aplicaciones web y servicios API. Los JWT son compactos, aut\u00f3nomos y f\u00e1ciles de usar en entornos distribuidos.</p> <p>Flet-Easy contiene una integraci\u00f3n b\u00e1sica para usar JWT de manera simple y r\u00e1pida, al integrar JWT en la aplicaci\u00f3n puedes configurar el tiempo de sesi\u00f3n del usuario, as\u00ed como una expiraci\u00f3n autom\u00e1tica de sesi\u00f3n. Para agregar JWT necesitaremos las siguientes configuraciones.</p> <p>En la clase <code>FletEasy</code> debemos configurar los siguientes par\u00e1metros:</p> <ul> <li>El valor de <code>auto_logout</code> es falso por defecto (cierra sesi\u00f3n autom\u00e1ticamente).</li> <li>Para configurar la <code>secret_key</code> es necesario usar la clase <code>SecretKey</code> de <code>FletEasy</code>.</li> </ul>"},{"location":"es/basic-jwt/#configuracion","title":"Configuraci\u00f3n","text":""},{"location":"es/basic-jwt/#algoritmo-hs256","title":"Algoritmo HS256","text":"main.py<pre><code>import flet_easy  as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n        algorithm=fs.Algorithm.HS256,\n        secret=SECRET_KEY\n        ),\n    auto_logout=True,  # Activa el cierre autom\u00e1tico de la sesi\u00f3n\n)\n</code></pre>"},{"location":"es/basic-jwt/#algoritmo-rs256","title":"Algoritmo RS256","text":"<p>Info</p> <p>Para usar el algoritmo <code>RS256</code> debes tener instalada la librer\u00eda <code>cryptographic</code>.</p> main.py<pre><code>import flet_easy  as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n       algorithm=fs.Algorithm.RS256,\n       pem_key=fs.PemKey(private=PRIVATE_KEY, public=PUBLIC_KEY)\n    ),\n    auto_logout=True,  # Activa el cierre autom\u00e1tico de la sesi\u00f3n\n)\n</code></pre>"},{"location":"es/basic-jwt/#obtener-secret_key","title":"Obtener <code>secret_key</code>","text":"<p>FletEasy proporciona una clase llamada <code>EasyKey</code> para obtener f\u00e1cilmente una secret_key para usar, luego podemos copiarla a un archivo o usarla como variables de entorno.</p> <pre><code>import flet_easy as fs\n\nkey = fs.EasyKey()\n\n# --- HS256\nSECRET_KEY = key.secret_key()\n\n# --- RS256\nPRIVATE_KEY = key.private_key()\nPUBLIC_KEY = key.public_key()\n</code></pre>"},{"location":"es/basic-jwt/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>Despu\u00e9s de haber configurado la <code>secret_key</code>, podemos comenzar a configurar el uso de JWT. Para esto vamos a requerir el uso del m\u00e9todo <code>login</code> de <code>Datasy</code> (data), se usar\u00e1 como normalmente lo usar\u00edamos sin usar JWT, pero usaremos el par\u00e1metro <code>time_expiry</code> y <code>value</code> que tendr\u00e1 que ser un diccionario obligatoriamente.</p> <ul> <li>M\u00e1s detalles del m\u00e9todo <code>login</code></li> <li>M\u00e1s detalles del m\u00e9todo <code>logout</code></li> </ul>"},{"location":"es/basic-jwt/#ejemplo","title":"Ejemplo","text":"sensitive.py<pre><code>SECRET_KEY = \"7dbd00fd8ba528257c641b7c5c411cb5abdca774d348d36a3af86f644b132382a3f3f71361fd4e19d2d2dcbcee6f2769af84cbe372a3a5b9db35d3d2707e1d0a\"\n\nPUBLIC_KEY = \"\"\"-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAmSNxQBBYOJEJD+XIDDBXK1qxUTpSsiybrtdvZH30f6G1o1MNsj17\nJjexf2ub7GO0J3TbDz4+dkEtVciG5cOG+bJ2RR2+09yIm3MC5xdRB12DaexU6EGd\nEzbrZFiOxurzL3SSXzaABo/5DoLjk+eEF9YHhnnmoCjuAaV195PQ1Bkrn6h6kTpP\nMtpJ5UIMVAFrtNNXPcii4P6ESn00kxcL55daVoKpyuC2hOiZFn9uQHoUrrtNGJGi\nil6JjJPWWr/PU3RKdf++/QNsoJ2Erkob1FWz16+lIhJ2fsK6Qai6K0mXUqTPF5Hl\n/Pi7zyw81fAgLE3bOdzVJAbBkMqKRvR9nQIDAQAB\n-----END RSA PUBLIC KEY-----\"\"\"\n\nPRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\nMIIEqQIBAAKCAQEAmSNxQBBYOJEJD+XIDDBXK1qxUTpSsiybrtdvZH30f6G1o1MN\nsj17Jjexf2ub7GO0J3TbDz4+dkEtVciG5cOG+bJ2RR2+09yIm3MC5xdRB12DaexU\n6EGdEzbrZFiOxurzL3SSXzaABo/5DoLjk+eEF9YHhnnmoCjuAaV195PQ1Bkrn6h6\nkTpPMtpJ5UIMVAFrtNNXPcii4P6ESn00kxcL55daVoKpyuC2hOiZFn9uQHoUrrtN\nGJGiil6JjJPWWr/PU3RKdf++/QNsoJ2Erkob1FWz16+lIhJ2fsK6Qai6K0mXUqTP\nF5Hl/Pi7zyw81fAgLE3bOdzVJAbBkMqKRvR9nQIDAQABAoIBAQCCRZNGw2C5JjBG\nVNvb+pd86xbimbHVnnsFvoElRLzkgmUpPjLtiL2lYkVdtuYaryqHUjI0AmhSYtm1\nGvQeqzm8WqOf4lD+m6GeU7WJbt1gXZ24UvJb7c04lkSixW8YKrCbkxgdZRh9/KYL\nQS9mF9HYERuvuy2E26wXWIwBJjQoB9BJpM6LA2+Pwb6Bygc6e/UOq981+BAY3bbq\nPvRxfLk60xWLmtrS/O9HdGB0vNEvznG6X0+/v0a7Qv8AGd/sSU6cgowF+gyCwG9u\n9uj7X6mEfNw5ZDUvJnH6wWRWfu+zeW4e18lA4GYiQwwXyciDey5T+RI/d4HgNyLn\nh2SHLFmlAoGJALkDoPdvIUyuKkfe6zl2w1FV2uYF4RLdU9O632zI7Ts4dYnhJxkT\nQOdjJaBFSEBwz7YdgMP8ZAWhOEfB582Bkt99mn7Q4YtARMnx44/Ex2CKN6jXr6OS\np8jxIuOfCd/rpMFVz0+SiqS7yWcTPdSbLPWFAu6KeYvfLMEHzi+Ah7r1UEk2k4HW\nL+MCeQDT5O5460PFcZP+hSIsGT/mW5ChRmZS/7/ZB0zJQ9nB/SGtgD/AwAgusHRb\n9+DherSehCHWcahRzDONy+UDXxuVzwSSweD4HJCG7tPykGDxEQmhSY56pShaAp1t\n+u0UWD+Sn6jpEEsZzNsjaxCyzCMwem2Xrt5HFH8CgYgPRohsxYUnUp31Dye2t+KK\nfZ80LLoXl6SLL7uwvKoxoIi72JYk0N0j/aCmqfG8OFQ+AhOWmukbOeNusUjVQ+R/\nhVxTKiXlHGpRjiIuxZ18kAzmaOB8jehCg/5Qctoa3dbdi5sxQ7UkwshvNTx+qE0+\n/DtwvIgqj0OfsGhKrb8HJaf6U4I8TxXnAnhVh/VSzfR/QIdyl57hmheXDqLk1pv7\nKMzx9+Zg34iIq3rqo/gX/+vNnOB7NyWJHpTF36QhAaPl0L2GoSUCJWPnJrc73hLH\nVBBqxwC6yti2th/jAOQIUZ5mJuQRPtZv/ec7ckMmQLNv6KcUNuV4proVmXWfYrDK\nlFUCgYg62k/vLCnHlnl7PwMb9BJAVyxuWPjihhfKJx3i371/iQn+bHD86PnsfRUO\nBfJI9TjPn2k1r+R4AxSzFOr0ZwmusjfyklzJS77wAaAaH9xvfEFLCqtbfZv+w3oh\nKzuz8LYM/PJmIWIBTo2mqDwp/Iv2EbMKw0Jjn0cgnZINs9UciQqhxX4R49I3\n-----END RSA PRIVATE KEY-----\"\"\"\n</code></pre> <p>En este ejemplo vamos a hacer muy similar con el ejemplo de <code>Route-protection</code>, solo hemos configurado la <code>secret_key</code>, usado el par\u00e1metro <code>time_expiry</code> del m\u00e9todo <code>login</code> y usado la funci\u00f3n <code>decode</code> de <code>FletEasy</code> para obtener el payload almacenado en el almacenamiento del cliente decodificado.</p> main.py<pre><code>from datetime import timedelta\n\nimport flet as ft\nimport flet_easy as fs\nfrom sensitive import SECRET_KEY\n\ndb = []\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\",\n    secret_key=fs.SecretKey(\n        algorithm=fs.Algorithm.HS256,\n        secret=SECRET_KEY\n        ),\n    auto_logout=True,  # Activa el cierre autom\u00e1tico de la sesi\u00f3n\n)\n\n@app.login\ndef login_x(data: fs.Datasy):\n    # decodificar payload\n    value = fs.decode(key_login=\"login\", data=data)\n\n    print(\"value:\", value)\n\n    \"\"\" Verificamos si el nombre de usuario que est\u00e1 almacenado en el navegador\n    est\u00e1 en la base de datos simulada. \"\"\"\n    if not value:\n        return False\n    elif value.get(\"user\") in db:\n        return True\n\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\", protected_route=True)\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # Eliminamos la clave que hemos registrado previamente\n            ft.ElevatedButton(\n                \"Logaut\",\n                on_click=data.logout(\"login\")\n                ),\n            ft.ElevatedButton(\n                \"Home\",\n                on_click=data.go(\"/login\")\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # crear usuario almacenado de inicio de sesi\u00f3n\n    username = ft.TextField(label=\"Username\", width=200)\n\n    def store_login(e):\n        db.append(username.value)  # Agregamos a la base de datos simulada\n\n        \"\"\"Primero los valores deben almacenarse en el navegador, luego en el\n        decorador login se debe recuperar el valor a trav\u00e9s de la clave usada\n        y luego se deben usar validaciones.\"\"\"\n        data.login(\n            key=\"login\",\n            value={\"user\": username.value},\n            next_route=\"/dashboard\",\n            time_expiry=timedelta(seconds=10),\n        )\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\n                \"store login in browser\",\n                on_click=store_login\n                ),\n            ft.ElevatedButton(\n                \"go Dasboard\",\n                on_click=data.go(\"/dashboard\")\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"es/basic-jwt/#demo","title":"\ud83c\udfac Demo","text":"<p>APP </p> <p>WEB </p>"},{"location":"es/basic-jwt/#decode","title":"decode","text":"<p>Decodifica el jwt y actualiza las sesiones del navegador.</p> <p>Par\u00e1metros a usar:</p> <ul> <li><code>key_login</code>: clave usada para almacenar los datos en el cliente, tambi\u00e9n usada en el m\u00e9todo <code>login</code> de <code>Datasy</code>.</li> <li><code>data</code>: Instancia de objeto de la clase <code>Datasy</code>.</li> </ul> <p>Info</p> <p>_ Soporta async, ejemplo: <code>decode_async</code>. _ Si la funci\u00f3n a usar es async se recomienda usar <code>decode_async</code> para evitar errores.</p> <p>Nota</p> <p>Las funciones <code>decode</code> y <code>decode_async</code> se pueden usar en otras partes del c\u00f3digo, por ejemplo: Middleware</p>"},{"location":"es/begin/","title":"Inicio","text":""},{"location":"es/begin/#flet-easy","title":"Flet-Easy","text":"<p><code>Flet-Easy</code> es un paquete construido como complemento para <code>Flet</code>, dise\u00f1ado para principiantes, lo que hace es facilitar el uso de <code>Flet</code> al construir tus aplicaciones, con un c\u00f3digo m\u00e1s ordenado y simple.</p>"},{"location":"es/begin/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>F\u00e1cil de usar (de ah\u00ed el nombre).</li> <li>Facilita el manejo de eventos de <code>flet</code>.</li> <li>Enrutamiento de p\u00e1ginas simple (Hay tres formas) para la que mejor se adapte a ti. [<code>Ver m\u00e1s</code>]</li> <li>Construcci\u00f3n de aplicaciones con numerosas p\u00e1ginas y configuraciones personalizadas de flet para escritorio, m\u00f3vil y sitios web.</li> <li>Proporciona una mejor construcci\u00f3n de tu c\u00f3digo, que puede ser escalable y f\u00e1cil de leer (se adapta a tus preferencias, no hay limitaciones).</li> <li>Enrutamiento din\u00e1mico, personalizaci\u00f3n en las rutas para mayor precisi\u00f3n en el env\u00edo de datos. [<code>Ver m\u00e1s</code>]</li> <li>Protecci\u00f3n de rutas [<code>Ver m\u00e1s</code>]</li> <li>P\u00e1gina 404 personalizada [<code>Ver m\u00e1s</code>]</li> <li>Compartir datos controlados entre p\u00e1ginas. [<code>Ver m\u00e1s</code>]</li> <li>Soporte as\u00edncrono.</li> <li>Soporte de Middleware (en la aplicaci\u00f3n en general y en cada una de las p\u00e1ginas). [<code>Ver m\u00e1s</code>]</li> <li>Soporte JWT para sesiones de autenticaci\u00f3n en el par\u00e1metro de datos. (\u00fatil para controlar el tiempo de sesiones) [<code>Ver m\u00e1s</code>]</li> <li>Trabajar con otras aplicaciones. [<code>Ver m\u00e1s</code>]</li> <li>CLI para crear estructura de aplicaci\u00f3n <code>FletEasy</code> (<code>fs init</code>) [<code>Ver m\u00e1s</code>]</li> <li>F\u00e1cil integraci\u00f3n de <code>on_keyboard_event</code> en cada una de las p\u00e1ginas. [<code>Ver m\u00e1s</code>]</li> <li>Usa el porcentaje del ancho y alto de la p\u00e1gina con <code>on_resize</code>. [<code>Ver m\u00e1s</code>]</li> <li>Control <code>ResponsiveControlsy</code> para hacer la aplicaci\u00f3n responsiva, \u00fatil para aplicaciones de escritorio. [<code>Ver m\u00e1s</code>]</li> <li>Soporta empaquetado de aplicaciones para su distribuci\u00f3n. [<code>Ver m\u00e1s</code>]</li> </ul>"},{"location":"es/begin/#eventos-de-flet-que-maneja","title":"Eventos de Flet que maneja","text":"<ul> <li><code>on_route_change</code>: Enrutamiento din\u00e1mico</li> <li><code>on_view_pop</code></li> <li><code>on_keyboard_event</code></li> <li><code>on_resize</code></li> <li><code>on_error</code></li> </ul>"},{"location":"es/begin/#ejemplo-de-aplicacion","title":"Ejemplo de aplicaci\u00f3n","text":"<p>Aqu\u00ed hay un ejemplo de una aplicaci\u00f3n con 2 p\u00e1ginas, \"Home\" y \"Counter\":</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/flet-easy\")\n\n# A\u00f1adimos una p\u00e1gina\n@app.page(route=\"/flet-easy\", title=\"Flet-Easy\")\ndef index_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Home page\"),\n            ft.FilledButton(\"Go to Counter\", on_click=data.go(\"/counter\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# A\u00f1adimos una segunda p\u00e1gina\n@app.page(route=\"/counter\", title=\"Counter\")\ndef counter_page(data: fs.Datasy):\n    page = data.page\n    txt_number = ft.TextField(value=\"0\", text_align=\"right\", width=100)\n\n    def minus_click(e):\n        txt_number.value = str(int(txt_number.value) - 1)\n        page.update()\n\n    def plus_click(e):\n        txt_number.value = str(int(txt_number.value) + 1)\n        page.update()\n\n    return ft.View(\n        controls=[\n            ft.Row(\n                [\n                    ft.IconButton(ft.icons.REMOVE, on_click=minus_click),\n                    txt_number,\n                    ft.IconButton(ft.icons.ADD, on_click=plus_click),\n                ],\n                alignment=\"center\",\n            ),\n            ft.FilledButton(\"Go to Home\", on_click=data.go(\"/flet-easy\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# Ejecutamos la aplicaci\u00f3n\napp.run()\n</code></pre>"},{"location":"es/begin/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/cli-to-create-app/","title":"CLI para crear aplicaci\u00f3n","text":"<p>Para iniciar un proyecto con <code>Flet-Easy</code> se proporciona un cli para facilitar la construcci\u00f3n de una app.</p>"},{"location":"es/cli-to-create-app/#estructura-de-la-aplicacion","title":"Estructura de la aplicaci\u00f3n","text":"<p>Estructura principal</p> <p></p> <p>La cual puede escalar a una app con requisitos m\u00e1s altos como un patr\u00f3n de dise\u00f1o basado en MVC.</p> <p>Ejemplo estructura MVC</p> <p></p>"},{"location":"es/cli-to-create-app/#cli","title":"CLI","text":"Recuerda instalar FletEasy primero. <pre><code>pip install flet-easy[all]\n</code></pre> <p>Note</p> <p>Si usas el CLI <code>fs</code>, es importante tener <code>git</code> instalado.</p> <pre><code>fs init\n</code></pre>"},{"location":"es/cli-to-create-app/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/data-sharing-between-pages/","title":"Compartir datos entre p\u00e1ginas","text":"<p>Para poder manipular los datos entre sesiones de cliente, se usa <code>data.share</code>, <code>data</code> es el par\u00e1metro de la funci\u00f3n decorada por <code>page</code>. A diferencia de <code>page.session</code> esto permite una mejor protecci\u00f3n de los datos que quieres compartir en las p\u00e1ginas, ya que a trav\u00e9s del par\u00e1metro <code>share_data</code> del decorador <code>page</code> puedes limitar a qu\u00e9 p\u00e1ginas quieres compartir los datos, si la p\u00e1gina no tiene permiso para compartir los datos estos ser\u00e1n eliminados autom\u00e1ticamente. Los m\u00e9todos a usar son similares a <code>page.session</code> ejemplo.</p> <p>Adem\u00e1s de eso obtienes algunos m\u00e9todos extra:</p> <ul> <li><code>contains</code>: Devuelve un booleano, es \u00fatil para saber si hay datos compartidos.</li> <li><code>get_values</code>: Obtener una lista de todos los valores compartidos.</li> <li><code>get_all</code>: Obtener el diccionario de todos los valores compartidos.</li> </ul>"},{"location":"es/data-sharing-between-pages/#ejemplo","title":"Ejemplo","text":"<p>Se puede crear en diferentes archivos .py, por ejemplo usando la clase <code>AddPagesy</code> de <code>Flet-Easy</code> y luego a\u00f1adirlo al archivo main.py.</p> <p>En este caso la p\u00e1gina #1 crea los datos para compartir con las otras p\u00e1ginas que tienen habilitado el par\u00e1metro <code>share_data</code> del decorador <code>page</code>. Con eso en mente la p\u00e1gina #3 no podr\u00e1 acceder a los datos compartidos, en cuyo caso los datos compartidos se eliminar\u00e1n autom\u00e1ticamente. (Esto funciona en p\u00e1ginas que redirigen continuamente, si cambias a una p\u00e1gina que no permite compartir datos, se eliminar\u00e1n).</p> <pre><code>from dataclasses import dataclass\n\nimport flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/send-data\")\n\n\n@dataclass\nclass Test:\n    name: int\n    version: str\n\n\n# 1\n@app.page(\"/send-data\", title=\"send data\", share_data=True)\nasync def send_data_page(data: fs.Datasy):\n    page = data.page\n\n    data.share.set(\"test\", Test(\"Flet-Easy\", \"0.2.0\"))\n    data.share.set(\"owner\", \"Daxexs\")\n\n    return ft.View(\n        controls=[\n            ft.Text(f\"data keys: {data.share.get_keys()}\"),\n            ft.Text(f\"data values: {data.share.get_values()}\"),\n            ft.Text(f\"data dict: {data.share.get_all()}\"),\n            ft.ElevatedButton(\n                \"Ver datos compartidos\",\n                on_click=data.go(\"/data\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# 2\n@app.page(\"/data\", title=\"data\", share_data=True)\nasync def get_data_page(data: fs.Datasy):\n    page = data.page\n\n    # Se comprueba si hay datos almacenados en el diccionario (data.share.set)\n    if data.share.contains():\n        x: Test = data.share.get(\"test\")\n        y: str = data.share.get(\"owner\")\n        res = ft.Text(f\"Nombre: {x.name}\\nVersi\u00f3n: {x.version}\\n-----\\nPropietario: {y}\")\n    else:\n        res = ft.Text(\"\u00a1No se pas\u00f3 ning\u00fan valor en la p\u00e1gina!\")\n\n    return ft.View(\n        controls=[\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n                ),\n            ft.ElevatedButton(\n                \"Verificar la siguiente p\u00e1gina para datos coincidentes\",\n                on_click=data.go(\"/info\")\n            ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# 3\n@app.page(\"/info\", title=\"Informaci\u00f3n\")\nasync def info_page(data: fs.Datasy):\n    page = data.page\n\n    # Se comprueba si hay datos almacenados en el diccionario (data.share.set)\n    if data.share.contains():\n        x: Test = data.share.get(\"test\")\n        y: str = data.share.get(\"owner\")\n        res = ft.Text(f\"Nombre: {x.name}\\nVersi\u00f3n: {x.version}\\n-----\\nPropietario: {y}\")\n    else:\n        res = ft.Text(\"\u00a1No se pas\u00f3 ning\u00fan valor en la p\u00e1gina!\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"\u00bfAcceso a datos compartidos?\"),\n            ft.Container(\n                content=res,\n                padding=20,\n                border_radius=20,\n                bgcolor=ft.colors.BLACK26\n                ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run(view=ft.AppView.WEB_BROWSER)\n</code></pre>"},{"location":"es/data-sharing-between-pages/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/dynamic-routes/","title":"Rutas din\u00e1micas","text":"<p>Flet-Easy proporciona un enrutamiento simple y potente para gestionar el acceso a las p\u00e1ginas creadas, contiene 3 formas de uso (elige la que mejor se adapte a ti).</p>"},{"location":"es/dynamic-routes/#forma-simple","title":"Forma simple","text":"<p>Obt\u00e9n los valores de los par\u00e1metros URL, usando los datos de los par\u00e1metros de la funci\u00f3n decorada por <code>page()</code>.</p> Disponible desde la versi\u00f3n 0.2.6 <p>Se soportan cualquiera de estos formatos:</p> <pre><code>* `{id}`\n* `&lt;id&gt;`\n</code></pre>"},{"location":"es/dynamic-routes/#ejemplo","title":"Ejemplo","text":"<p>[El c\u00f3digo del ejemplo se mantiene igual]</p>"},{"location":"es/dynamic-routes/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/dynamic-routes/#forma-avanzada","title":"Forma avanzada","text":"Disponible desde la versi\u00f3n 0.2.6 <p>La tipificaci\u00f3n de par\u00e1metros dentro de la url cambia, ahora soportando los tipos nativos de python <code>(:int, :str, :bool, :float)</code>, en lugar de usar <code>(:d, :l)</code> que eran para un n\u00famero y cadena respectivamente.</p> <p>Utiliza par\u00e1metros din\u00e1micos en la URL para obtener datos espec\u00edficos, por ejemplo, se solicita que {id:int} sea un n\u00famero y {name:str} una cadena.</p>"},{"location":"es/dynamic-routes/#ejemplo-1","title":"Ejemplo #1","text":"<p>[El c\u00f3digo del ejemplo se mantiene igual]</p>"},{"location":"es/dynamic-routes/#ejemplo-2","title":"Ejemplo #2","text":"<p>Disponible solo hasta la versi\u00f3n 0.2.4</p> <p>Usa par\u00e1metros din\u00e1micos en la url para obtener datos espec\u00edficos, por ejemplo <code>{id:d}</code> se solicita que sea un n\u00famero y <code>{name:l}</code> una cadena. Para m\u00e1s informaci\u00f3n aqu\u00ed</p> <p>[El c\u00f3digo del ejemplo se mantiene igual]</p>"},{"location":"es/dynamic-routes/#demo_1","title":"\ud83c\udfac Demo","text":""},{"location":"es/dynamic-routes/#validacion-personalizada","title":"Validaci\u00f3n personalizada","text":"Disponible desde la versi\u00f3n 0.2.6 <ul> <li>La tipificaci\u00f3n de par\u00e1metros dentro de la url cambia, ahora soportando los tipos nativos de python <code>(:int, :str, :bool, :float)</code>, en lugar de usar <code>(:d, :l)</code> que eran para un n\u00famero y cadena respectivamente.</li> <li>La funci\u00f3n utilizada en <code>custom_params</code> ahora solo soporta devolver <code>None</code>, para decir que la url no coincide, ya que <code>False</code> puede interpretarse como un valor <code>:bool</code> y podr\u00eda coincidir con la url. Tambi\u00e9n puedes devolver cualquier valor en caso de que quieras aceptar la url.</li> </ul> <p>Para controlar la validaci\u00f3n de datos personalizados en la ruta din\u00e1mica, debes usar el par\u00e1metro <code>custom_params</code> del decorador <code>page</code>, en este puedes ingresar la clave y el valor como una funci\u00f3n, siendo un diccionario puede soportar una amplia variedad de datos, seg\u00fan tu imaginaci\u00f3n \ud83e\udd14.</p>"},{"location":"es/dynamic-routes/#ejemplo-1_1","title":"Ejemplo #1","text":"<p>[El c\u00f3digo del ejemplo se mantiene igual]</p>"},{"location":"es/dynamic-routes/#ejemplo-2_1","title":"Ejemplo #2","text":"<p>Disponible solo hasta la versi\u00f3n 0.2.4</p> <p>[El c\u00f3digo del ejemplo se mantiene igual]</p>"},{"location":"es/dynamic-routes/#demo_2","title":"\ud83c\udfac Demo","text":""},{"location":"es/how-to-use/","title":"C\u00f3mo usar","text":"<p><code>Flet-Easy</code> presenta una estructura que se adapta a c\u00f3mo el usuario quiera implementarla, ya que permite tener varios archivos y conectarlos a un archivo principal.</p> <ul> <li>Para usar <code>Flet-easy</code>, primero tenemos que usar la clase <code>FletEasy</code> y crear un objeto donde hacer las configuraciones de la aplicaci\u00f3n.</li> </ul>"},{"location":"es/how-to-use/#fleteasy","title":"FletEasy","text":"<p>Creamos el objeto de la aplicaci\u00f3n, en el cual puedes configurar:</p> <ul> <li><code>route_prefix</code>: La ruta que es diferente de <code>/</code></li> <li><code>route_init</code>: La ruta inicial para inicializar la app, por defecto es <code>/</code></li> <li><code>route_login</code>: La ruta a la que se redirigir\u00e1 cuando la app tenga configurada la protecci\u00f3n de rutas</li> <li><code>on_Keyboard</code>: Habilita el evento on_Keyboard, por defecto est\u00e1 deshabilitado (False). [<code>Ver m\u00e1s</code>]</li> <li><code>on_resize</code>: Activa el evento on_resize, por defecto est\u00e1 deshabilitado (False). [<code>Ver m\u00e1s</code>]</li> <li><code>secret_key</code>: Se usa con la clase <code>SecretKey</code> de FletEasy, para configurar JWT o almacenamiento del cliente. [<code>Ver m\u00e1s</code>]</li> <li><code>path_views</code>: Configuraci\u00f3n de la carpeta donde est\u00e1n los archivos .py de las p\u00e1ginas, se usa la clase <code>Path</code> para configurarlo. [<code>Ver m\u00e1s</code>]</li> </ul>"},{"location":"es/how-to-use/#demo","title":"\ud83d\udcf7 Demo","text":""},{"location":"es/how-to-use/#ejemplo","title":"Ejemplo","text":"<pre><code>import flet_easy as fs\n\napp = fs.FletEasy(\n    route_prefix='/FletEasy',\n    route_init='/FletEasy/home',\n)\n</code></pre>"},{"location":"es/how-to-use/#metodos","title":"M\u00e9todos","text":"<ul> <li><code>run()</code>: Ejecuta la app. Soporta async, fastapi y export_asgi_app. [<code>Ver m\u00e1s</code>]</li> <li><code>add_middleware()</code>: Requiere una lista de funciones, la funci\u00f3n que actuar\u00e1 como middleware recibir\u00e1 como \u00fanico par\u00e1metro obligatorio [data:Datasy] y su estructura o contenido puede variar seg\u00fan el contexto y los requisitos espec\u00edficos del middleware. [<code>Ver m\u00e1s</code>]</li> <li><code>add_pages()</code>: A\u00f1ade p\u00e1ginas desde otros archivos. En la lista se ingresan objetos de clase AddPagesy desde otros archivos .py. [<code>Ver m\u00e1s</code>]</li> <li><code>add_routes()</code>: A\u00f1ade rutas sin el uso de decoradores. [<code>Ver m\u00e1s</code>]</li> </ul>"},{"location":"es/how-to-use/#decoradores","title":"Decoradores","text":"<ul> <li><code>page()</code>: Decorador para a\u00f1adir una nueva p\u00e1gina a la app. Este m\u00e9todo decorador act\u00faa de manera similar a la clase <code>Pagesy</code> y contiene los mismos par\u00e1metros requeridos. [<code>Ver m\u00e1s</code>]</li> <li><code>config</code>: Decorador para a\u00f1adir una configuraci\u00f3n personalizada a la app. [<code>Ver m\u00e1s</code>]</li> <li><code>login</code>: Decorador para a\u00f1adir una configuraci\u00f3n de inicio de sesi\u00f3n a la app (protected_route). [<code>Ver m\u00e1s</code>]</li> <li><code>page_404()</code>: Decorador para a\u00f1adir una nueva p\u00e1gina personalizada cuando no se encuentra una ruta en la app. [<code>Ver m\u00e1s</code>]</li> <li><code>view</code>: Decorador para a\u00f1adir controles personalizados a la aplicaci\u00f3n, la funci\u00f3n decoradora devolver\u00e1 el <code>Viewsy</code>. Se obtendr\u00e1 en funciones con el par\u00e1metro <code>data:fs.Datasy</code> y se puede a\u00f1adir a la vista de p\u00e1gina decorada con <code>data.view</code>. [<code>Ver m\u00e1s</code>]</li> <li><code>config_event_handler</code>: Decorador para a\u00f1adir configuraciones de eventos de p\u00e1gina de flet. [<code>Ver m\u00e1s</code>]</li> </ul>"},{"location":"es/how-to-use/#como-crear-una-nueva-pagina","title":"\u00bfC\u00f3mo crear una nueva p\u00e1gina?","text":"<p>Para crear una nueva p\u00e1gina usas un decorador que proporciona el objeto creado por la clase <code>FletEasy</code>, que es <code>page</code> que te permite ingresar ciertos par\u00e1metros.</p>"},{"location":"es/how-to-use/#decorador-page","title":"Decorador <code>page</code>","text":"<p>Para a\u00f1adir p\u00e1ginas, se requieren los siguientes par\u00e1metros:</p> <ul> <li><code>route</code>: cadena de texto de la url, por ejemplo(<code>'/FletEasy'</code>)</li> <li><code>title</code>: Define el t\u00edtulo de la p\u00e1gina</li> <li><code>page_clear</code>: Elimina las p\u00e1ginas de la lista <code>page.views</code> de flet (opcional)</li> <li><code>share_data</code>: Es un valor booleano, \u00fatil si quieres compartir datos entre p\u00e1ginas, de una forma m\u00e1s restringida (opcional). [<code>Ver m\u00e1s</code>]</li> <li><code>protected_route</code>: Protege la ruta de la p\u00e1gina, seg\u00fan la configuraci\u00f3n del decorador <code>login</code> de la clase <code>FletEasy</code> (opcional). [<code>Ver m\u00e1s</code>]</li> <li><code>custom_params</code>: Para a\u00f1adir validaci\u00f3n de par\u00e1metros en la url personalizada usando un diccionario, donde la clave es el nombre de validaci\u00f3n del par\u00e1metro y el valor es la funci\u00f3n personalizada que debe devolver un valor booleano. [<code>Ver m\u00e1s</code>]</li> <li><code>middleware</code>: Act\u00faa como intermediario entre diferentes componentes de software, interceptando y procesando solicitudes y respuestas. Permiten a\u00f1adir funcionalidades a una aplicaci\u00f3n de forma flexible y modular. Se puede usar tanto en la app en general como en cada una de las p\u00e1ginas (opcional). [<code>Ver m\u00e1s</code>]</li> </ul> <p>[El c\u00f3digo de ejemplo se mantiene igual]</p>"},{"location":"es/how-to-use/#datasy-data","title":"Datasy (data)","text":"Disponible desde la versi\u00f3n 0.2.4 <ul> <li><code>history_routes</code>: Obtener el historial de las rutas</li> <li><code>go_back()</code>: M\u00e9todo para volver a la ruta anterior</li> </ul> <p>La funci\u00f3n decorada siempre recibir\u00e1 un par\u00e1metro que es <code>data</code> (puede ser cualquier nombre), que crear\u00e1 un objeto de tipo <code>Datasy</code> de <code>Flet-Easy</code>.</p> <p>Esta clase tiene los siguientes atributos para acceder a sus datos:</p> <ul> <li><code>page</code>: Obtenemos los valores de la p\u00e1gina proporcionados por <code>Flet</code></li> <li><code>url_params</code>: Obtenemos un diccionario con los valores pasados a trav\u00e9s de la url</li> <li><code>view</code>: Obtener un objeto <code>View</code> de <code>Flet</code>, previamente configurado con el decorador <code>View</code> de <code>Flet-Easy</code></li> <li><code>route_prefix</code>: Valor ingresado en los par\u00e1metros de la clase <code>FletEasy</code> para crear el objeto app</li> <li><code>route_init</code>: Valor ingresado en los par\u00e1metros de la clase <code>FletEasy</code> para crear el objeto app</li> <li> <p><code>route_login</code>: Valor ingresado en los par\u00e1metros de la clase <code>FletEasy</code> para crear el objeto app</p> </li> <li> <p><code>share</code>: Se utiliza para poder almacenar y obtener valores en la sesi\u00f3n del cliente, la utilidad es poder tener mayor control en las p\u00e1ginas en las que se quiere compartir, para ello se debe usar el par\u00e1metro <code>share_data</code> del decorador <code>page</code>. Los m\u00e9todos a usar son similares a <code>page.session</code>. [<code>Ver m\u00e1s</code>]   Adem\u00e1s de eso obtienes algunos m\u00e9todos extra:</p> </li> <li> <p><code>contains</code>: Devuelve un booleano, es \u00fatil para saber si hay datos compartidos</p> </li> <li><code>get_values</code>: Obtener una lista de todos los valores compartidos</li> <li> <p><code>get_all</code>: Obtener el diccionario de todos los valores compartidos</p> </li> <li> <p><code>on_keyboard_event</code>: obtener valores de eventos para usar en la p\u00e1gina. [<code>Ver m\u00e1s</code>]</p> </li> <li><code>on_resize</code>: obtener valores de eventos para usar en la p\u00e1gina. [<code>Ver m\u00e1s</code>]</li> <li><code>route</code>: ruta proporcionada por el evento de ruta, es \u00fatil cuando se usan middlewares para comprobar si la ruta es accesible</li> <li><code>history_routes</code>: Obtener el historial de las rutas</li> </ul>"},{"location":"es/how-to-use/#metodos_1","title":"M\u00e9todos","text":"<ul> <li><code>logout()</code>: m\u00e9todo para cerrar sesiones de todas las secciones en el navegador (almacenamiento del cliente). [<code>Ver m\u00e1s</code>]</li> <li><code>login()</code>: M\u00e9todo para crear sesiones de todas las secciones en el navegador (almacenamiento del cliente). [<code>Ver m\u00e1s</code>]</li> <li><code>go()</code>: M\u00e9todo para cambiar la ruta de la aplicaci\u00f3n (recomendado usar este en lugar de <code>page.go</code> para evitar errores de ruta)</li> <li><code>redirect()</code>: Para redirigir a una ruta antes de que se cargue la p\u00e1gina, se usa en middleware</li> <li><code>go_back()</code>: M\u00e9todo para volver a la ruta anterior</li> </ul> <p>Tip</p> <p>Ahora <code>page.go()</code> y <code>data.go()</code> funcionan de manera similar para ir a una p\u00e1gina (<code>View</code>), la \u00fanica diferencia es que <code>data.go()</code> comprueba las redirecciones de url cuando se usa <code>data.redirect()</code>.</p> <p>logout y login</p> <p>Compatible con android, ios, windows y web.</p>"},{"location":"es/how-to-use/#demo_1","title":"\ud83c\udfac Demo","text":""},{"location":"es/installation/","title":"Instalaci\u00f3n","text":"<p>Info</p> <p>En la versi\u00f3n 0.1.3 en adelante se requiere instalar <code>flet</code> por separado, en versiones anteriores se instala por defecto.</p> <pre><code>pip install flet\n</code></pre> <p>Para instalar flet-easy simplemente copia esto en tu terminal despu\u00e9s de haber instalado <code>python &gt;= 3.8</code></p> <pre><code>pip install flet-easy\n</code></pre>"},{"location":"es/installation/#formas-de-instalar","title":"Formas de instalar","text":"<p>Disponible desde la versi\u00f3n 0.2.4</p> <p>Flet-Easy proporciona varias formas de instalaci\u00f3n. Esto te permite usar las dependencias que sean necesarias, evitando elementos innecesarios al construir tu aplicaci\u00f3n, permitiendo un mejor control.</p>"},{"location":"es/installation/#instalar-flet-easy-completo","title":"Instalar Flet-Easy Completo","text":"<p>Note</p> <p>Si usas el CLI <code>fs</code>, es importante tener <code>git</code> instalado.</p> <p>Instala todas las dependencias para usar, podr\u00e1s utilizar todas las funcionalidades proporcionadas por Flet-Easy</p> <pre><code>pip install flet-easy[all]\n</code></pre>"},{"location":"es/installation/#instalar-flet-easy-limpio","title":"Instalar Flet-Easy limpio","text":"<p>Tip</p> <p>Recomendado para empaquetado de aplicaciones <code>Flet</code>.</p> <p>Requiere la instalaci\u00f3n de Flet &gt;= 0.21.</p> <pre><code>pip install flet&gt;=0.21\n</code></pre>"},{"location":"es/installation/#si-no-usas-cli-to-create-app","title":"Si no usas: <code>[CLI-to-create-app]</code>","text":"<pre><code>pip install flet-easy\n</code></pre>"},{"location":"es/installation/#instalar-flet-easy-si-necesitas-usar-basic-jwt","title":"Instalar Flet-Easy si necesitas usar <code>[Basic-JWT]</code>","text":"<pre><code>pip install flet-easy[JWT]\n</code></pre>"},{"location":"es/middleware/","title":"Middleware","text":"<p>Act\u00faa como intermediario entre diferentes componentes de software, interceptando y procesando solicitudes y respuestas. Permite agregar funcionalidades antes de recargar cada p\u00e1gina de una manera flexible y modular. Agrega funcionalidades comunes, como autenticaci\u00f3n, registro, compresi\u00f3n de datos, cach\u00e9, manejo de errores, transformaci\u00f3n de datos, etc.</p> <p>La funci\u00f3n que actuar\u00e1 como middleware recibir\u00e1 como \u00fanico par\u00e1metro obligatorio <code>data: Datasy</code> y su estructura o contenido puede variar seg\u00fan el contexto y los requisitos espec\u00edficos del middleware.</p>"},{"location":"es/middleware/#metodo-y-atributo-a-usar-ver-mas","title":"M\u00e9todo y atributo a usar [<code>Ver m\u00e1s</code>]","text":"<ul> <li><code>data.route</code>: para conocer la ruta que se est\u00e1 cargando.</li> <li><code>data.redirect()</code>: ruta a redireccionar.</li> </ul> <p>Nota</p> <p>Si la funci\u00f3n devuelve None, no impedir\u00e1 que se cargue la p\u00e1gina a la que la ruta est\u00e1 accediendo.</p> <p>Info</p> <p>Se pueden usar varias funciones al mismo tiempo en el Middleware, ya que se ingresa una lista de funciones.</p>"},{"location":"es/middleware/#aplicacion-general","title":"Aplicaci\u00f3n General","text":"<p>Otra alternativa a protected-route</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/login\", route_login=\"/login\")\n\ndb = []  # Base de datos\n\n# -------------------------------------------------------------------------------\n\n\n# Middleware personalizado\nasync def login_middleware(data: fs.Datasy):\n    \"\"\" Si la ruta es '/login', devolver\u00e1 la funci\u00f3n None,\n    que no impedir\u00e1 el acceso a la p\u00e1gina. \"\"\"\n    if data.route == \"/login\":\n        return\n\n    username = await data.page.client_storage.get_async(\"login\")\n    if username is None or username not in db:\n        return data.redirect(\"/login\")\n\n\n# Middleware que se ejecuta en general, es decir, cada vez que cargas una p\u00e1gina.\napp.add_middleware([login_middleware])\n# -------------------------------------------------------------------------------\n\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\")\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # Eliminamos la clave que hemos registrado previamente\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"go Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\n# -------------------------------------------------------------------------------\n\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # crear usuario almacenado de inicio de sesi\u00f3n\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # Agregamos a la base de datos simulada\n\n        \"\"\"Primero los valores deben almacenarse en el navegador, luego en el\n        decorador login se debe recuperar el valor a trav\u00e9s de la clave usada\n        y luego se deben usar validaciones.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dashboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n\napp.run()\n</code></pre>"},{"location":"es/middleware/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/middleware/#para-cada-pagina","title":"Para cada p\u00e1gina","text":"<p>Otra alternativa a protected-route</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/login\", route_login=\"/login\")\n\ndb = []  # Base de datos\n\n# -------------------------------------------------------------------------------\n\n# Middleware personalizado\nasync def login_middleware(data: fs.Datasy):\n    username = await data.page.client_storage.get_async(\"login\")\n    if username is None or username not in db:\n        return data.redirect(\"/login\")\n\n# -------------------------------------------------------------------------------\n# Middleware usado para cargar esta p\u00e1gina\n@app.page(route=\"/dashboard\", title=\"Dashboard\", middleware=[login_middleware])\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # Eliminamos la clave que hemos registrado previamente\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"go Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# -------------------------------------------------------------------------------\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # crear usuario almacenado de inicio de sesi\u00f3n\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value)  # Agregamos a la base de datos simulada\n\n        \"\"\"Primero los valores deben almacenarse en el navegador, luego en el\n        decorador login se debe recuperar el valor a trav\u00e9s de la clave usada\n        y luego se deben usar validaciones.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dashboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"es/middleware/#demo_1","title":"\ud83c\udfac Demo","text":""},{"location":"es/ref/","title":"Ref","text":"<p>Similar a <code>Ref</code> de <code>Flet</code>, con la \u00fanica diferencia de que para acceder al control referenciado, se usa la propiedad <code>Ref.current</code> o <code>Ref.c</code></p> <p>Info</p> <p>Puede ser \u00fatil cuando creamos componentes y queremos referenciar los controladores para poder manejar eventos en el componente.</p>"},{"location":"es/ref/#ejemplo","title":"Ejemplo","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy()\n\n@app.page(route=\"/\", title=\"Use fs.Ref\")\ndef index_page(data: fs.Datasy):\n    first_name = fs.Ref[ft.TextField]()\n    last_name = fs.Ref[ft.TextField]()\n    greetings = fs.Ref[ft.Column]()\n\n    def btn_click(e):\n        greetings.current.controls.append(\n            ft.Text(f\"Hello, {first_name.current.value} {last_name.current.value}!\")\n        )\n        first_name.c.value = \"\"\n        last_name.c.value = \"\"\n        data.page.update()\n        first_name.c.focus()\n\n    return ft.View(\n        controls=[\n            ft.TextField(ref=first_name, label=\"First name\", autofocus=True),\n            ft.TextField(ref=last_name, label=\"Last name\"),\n            ft.ElevatedButton(\"Say hello!\", on_click=btn_click),\n            ft.Column(ref=greetings),\n        ]\n    )\n\napp.run()\n</code></pre>"},{"location":"es/responsiveControlsy/","title":"ResponsiveControlsy","text":"<p>Permite que los controles se adapten al tama\u00f1o de la aplicaci\u00f3n (responsive). Es adecuado para usar en aplicaciones, en web no se recomienda.</p> <p>Nota</p> <p>Evitar activar scroll fuera de ResponseControl.</p> <p>Esta clase contiene los siguientes par\u00e1metros:</p> <ul> <li><code>content: Control</code>: Contiene un control de flet.</li> <li><code>expand: int</code>: Para especificar el espacio que contendr\u00e1 el controlador de contenido en la aplicaci\u00f3n, 1 equivale a toda la aplicaci\u00f3n.</li> <li><code>resize_interval: int</code>: Para especificar el tiempo de respuesta (opcional).</li> <li><code>on_resize: callable</code>: Funci\u00f3n personalizada que se ejecutar\u00e1 cuando se redimensione la aplicaci\u00f3n (opcional).</li> <li><code>show_resize: bool</code>: Para observar el tama\u00f1o del controlador (ancho x * alto). se desactiva cuando se env\u00eda una funci\u00f3n on_resize. (opcional)</li> <li><code>show_resize_terminal: bool</code>: Para ver el tama\u00f1o del controlador (ancho x alto) en la terminal. (opcional)</li> </ul>"},{"location":"es/responsiveControlsy/#ejemplo","title":"Ejemplo","text":"<pre><code>import flet_easy as fs\n\nfs.ResponsiveControlsy(\n    content=ft.Container(\n        content=ft.Text(\"on_resize\"),\n        bgcolor=ft.colors.RED,\n        alignment=ft.alignment.center,\n        height=100\n    ),\n    expand=1,\n    show_resize=True\n)\n</code></pre>"},{"location":"es/responsiveControlsy/#uso-avanzado","title":"Uso avanzado","text":"<pre><code>import flet as ft\nimport flet_easy as fs\nfrom flet.canvas import CanvasResizeEvent\n\napp = fs.FletEasy(\n    route_init=\"/response\"\n)\n\nclass ResponseTest(ft.UserControl):\n    def __init__(self):\n        super().__init__()\n\n    def build(self):\n        return ft.Row(\n            controls=[\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Text(\"W x H\"),\n                        bgcolor=ft.colors.GREEN_400,\n                        alignment=ft.alignment.center,\n                    ),\n                    expand=1,\n                    show_resize=True,\n                ),\n                fs.ResponsiveControlsy(\n                    ft.Container(\n                        content=ft.Row(\n                            controls=[\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Column(\n                                            controls=[\n                                                ft.Container(\n                                                    bgcolor=ft.colors.DEEP_ORANGE_50,\n                                                    height=170,\n                                                    margin=5,\n                                                ),\n                                                ft.Container(\n                                                    bgcolor=ft.colors.BLACK87,\n                                                    height=170,\n                                                    margin=5\n                                                ),\n                                            ],\n                                            scroll=ft.ScrollMode.HIDDEN,\n                                            spacing=0,\n                                        ),\n                                        bgcolor=ft.colors.BROWN_500,\n                                        expand=True,\n                                        margin=ft.Margin(5, 5, 0, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n                                ),\n                                fs.ResponsiveControlsy(\n                                    content=ft.Container(\n                                        content=ft.Text(\n                                            \"ok\",\n                                        ),\n                                        bgcolor=ft.colors.CYAN_500,\n                                        alignment=ft.alignment.center,\n                                        margin=ft.Margin(0, 5, 5, 5),\n                                    ),\n                                    expand=1,\n                                    show_resize=True,\n                                ),\n                            ],\n                            expand=1,\n                            spacing=0,\n                        ),\n                        bgcolor=ft.colors.AMBER_600,\n                        alignment=ft.alignment.center,\n                    ),\n                    show_resize=True,\n                    expand=3,\n                ),\n            ],\n            expand=2,\n        )\n\n@app.page(route=\"/response\")\ndef response_page(data: fs.Datasy):\n    page = data.page\n    page.title = \"Response\"\n\n    def handle_resize(e: CanvasResizeEvent):\n        c = e.control.content\n        t = c.content\n        t.value = f\"{e.width} x {e.height}\"\n        page.update()\n\n    return ft.View(\n        controls=[\n            fs.ResponsiveControlsy(\n                content=ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.RED,\n                    alignment=ft.alignment.center,\n                    height=100,\n                ),\n                expand=1,\n                show_resize=True,\n            ),\n            fs.ResponsiveControlsy(\n                ft.Container(\n                    content=ft.Text(\"W x H\"),\n                    bgcolor=ft.colors.BLUE,\n                    alignment=ft.alignment.center\n                ),\n                on_resize=handle_resize,\n                expand=1,\n            ),\n            fs.ResponsiveControlsy(\n                content=ResponseTest(),\n                expand=2\n                )\n        ],\n    )\n\napp.run()\n</code></pre>"},{"location":"es/responsiveControlsy/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/run-the-app/","title":"Ejecutar la aplicaci\u00f3n","text":"<p>Para ejecutar la aplicaci\u00f3n utilizamos un m\u00e9todo de objeto ya instanciado por <code>FletEasy</code> (puedes personalizar los par\u00e1metros del m\u00e9todo seg\u00fan tus necesidades):</p>"},{"location":"es/run-the-app/#metodos","title":"M\u00e9todos","text":""},{"location":"es/run-the-app/#run","title":"run","text":""},{"location":"es/run-the-app/#uso-con-fastapi","title":"Uso con fastapi","text":"<p>Para obtener el main de la app y poder a\u00f1adirle Fastapi. </p>"},{"location":"es/run-the-app/#export-asgi-app","title":"Export asgi app","text":""},{"location":"es/run-the-app/#personalizar-como-se-ejecuta","title":"Personalizar c\u00f3mo se ejecuta","text":"<p>Si hay problemas en <code>build web</code></p> <p>Usa:</p> <pre><code>import flet as ft\nft.app(app.run(fastapi=True))\n</code></pre>"},{"location":"es/working-with-other-apps/","title":"Trabajando con otras aplicaciones","text":""},{"location":"es/working-with-other-apps/#trabajando-con-otras-aplicaciones-y-creando-apis","title":"Trabajando con otras aplicaciones y creando APIs","text":"<p>Para poder hacer que nuestra aplicaci\u00f3n principal funcione con otras aplicaciones, adem\u00e1s de poder crear APIs desde la misma ruta URL con el mismo host y puerto. Primero debemos obtener el main de la aplicaci\u00f3n para poder montarla en otra aplicaci\u00f3n. Para ello vamos a usar el m\u00e9todo <code>run</code> con su par\u00e1metro <code>fastapi=True</code>.</p> <p>!!! nota \"M\u00e1s informaci\u00f3n\" * Aqu\u00ed</p>"},{"location":"es/working-with-other-apps/#ejemplo","title":"Ejemplo","text":"main.py<pre><code>import flet as ft\nimport flet_easy as fs\nfrom flet import fastapi\n\napp = fs.FletEasy(\n    route_init=\"/Flet-Easy\",\n)\n\n@app.page(route=\"/Flet-Easy\", title=\"Flet-Easy\")\ndef home_page(data: fs.Datasy):\n    page = data.page\n    return ft.View(\n        controls=[\n            ft.Text(f\"Home page: {page.title}\"),\n            ft.Text(f\"Route: {page.route}\"),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n# Creamos una aplicaci\u00f3n en FastAPI\napp_main = fastapi.FastAPI()\n\n# Creando una API b\u00e1sica de prueba\n@app_main.get(\"/testing\")\ndef test_api():\n    return {\"success\": True}\n\n# Agregamos la aplicaci\u00f3n `flet` a `fastapi`\napp_main.mount(\"/\", fastapi.app(app.run(fastapi=True)))\n</code></pre>"},{"location":"es/working-with-other-apps/#ejecutar-la-aplicacion","title":"Ejecutar la aplicaci\u00f3n","text":"<pre><code>uvicorn main:app_main\n</code></pre>"},{"location":"es/working-with-other-apps/#demo","title":"\ud83d\udcf7 Demo","text":""},{"location":"es/add-pages/by-means-of-functions/","title":"Por medio de funciones","text":""},{"location":"es/add-pages/by-means-of-functions/#agregar-paginas-a-la-aplicacion-principal-sin-usar-decoradores","title":"Agregar p\u00e1ginas a la aplicaci\u00f3n principal sin usar decoradores","text":"<p>Para esto requeriremos el m\u00e9todo <code>add_routes</code> del objeto creado por la clase <code>FletEasy</code>.</p> <p>Soporta async</p>"},{"location":"es/add-pages/by-means-of-functions/#estructura-de-la-aplicacion","title":"Estructura de la aplicaci\u00f3n","text":""},{"location":"es/add-pages/by-means-of-functions/#ejemplo-usando-funciones","title":"Ejemplo usando funciones","text":"index.py<pre><code>import flet_easy as fs\nimport flet as ft\n\ndef page_index(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text('Index'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre>"},{"location":"es/add-pages/by-means-of-functions/#ejemplo-usando-clases","title":"Ejemplo usando clases","text":"<p>Disponible desde la versi\u00f3n 0.2.4</p> M\u00e1s informaci\u00f3n <p>Crear nuevas p\u00e1ginas (<code>View</code>) usando clases, no necesitas heredar de ninguna otra clase para agregar la p\u00e1gina, solo necesitas:</p> <pre><code>- El constructor debe tener como par\u00e1metro obligatorio [`data:fs.Datasy`](/flet-easy/0.2.0/how-to-use/#datasy-data) y si recibe un par\u00e1metro por medio de la url debe usarse como par\u00e1metro.\n- La clase a usar debe tener un m\u00e9todo obligatorio llamado `build` que devolver\u00e1 [`View`](https://flet.dev/docs/controls/view/) de flet, puede ser async si es necesario. Este m\u00e9todo `build` no recibe ning\u00fan par\u00e1metro.\n\n\ud83e\udd14 **\u00bfpor qu\u00e9 usar una clase?**\n\nLa clase puede tener varios beneficios, como la herencia que es \u00fatil para evitar repetir c\u00f3digo, entre otros.\n</code></pre> test.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nclass PageTest:\n    def __init__(self, data:fs.Datasy, id:int, name:str):\n        self.data = data\n        self.id = id\n        self.name = name\n\n    def build(self):\n        return ft.View(\n            controls=[\n                ft.Text('Text'),\n                ft.Text(f'Id: {self.id}'),\n                ft.Text(f'Name: {self.name}'),\n                ft.FilledButton(\n                            \"Go index\",\n                            on_click=self.data.go(\"/index\"),\n                        ),\n            ],\n            vertical_alignment=\"center\",\n            horizontal_alignment=\"center\"\n    )\n</code></pre>"},{"location":"es/add-pages/by-means-of-functions/#agregar-rutas","title":"Agregar rutas","text":"<p>Importamos las funciones o clases desde la carpeta <code>views</code>, luego usamos el m\u00e9todo <code>add_routes</code> de la instancia de FletEasy, en el cual agregaremos una lista de clases <code>Pagesy</code> donde configuraremos las rutas y las funciones o clases a utilizar adem\u00e1s de otros.</p> main.py<pre><code># Import functions from a `views` folder\nfrom views.user import users\nfrom views.index import page_index\nfrom views.test import PageTest\nimport flet_easy as fs\n\n# Add routes without the use of decorators\napp.add_routes(add_views=[\n    fs.Pagesy('/index', page_index, tilte='index'),\n    fs.Pagesy('/user/task', users, tilte='users'),\n    fs.Pagesy(\n              '/test/{id:d}/user/{name:l}',\n              PageTest,\n              title='test counter',\n              protected_route=True\n            ),\n])\n</code></pre>"},{"location":"es/add-pages/by-means-of-functions/#pagesy","title":"Pagesy","text":"<p>\ud83d\udcd1 La clase <code>Pagesy</code> requiere los siguientes par\u00e1metros:</p> <ul> <li><code>route</code>: cadena de texto de la url, por ejemplo(<code>'/index'</code>).</li> <li><code>view</code>: Almacena la funci\u00f3n de la p\u00e1gina.</li> <li><code>title</code>: Define el t\u00edtulo de la p\u00e1gina.</li> <li><code>clear</code>: Elimina las p\u00e1ginas de la lista <code>page.views</code> de flet. (opcional)</li> <li><code>share_data</code>: Es un valor booleano, \u00fatil si deseas compartir datos entre p\u00e1ginas de una manera m\u00e1s restringida. (opcional) [<code>Ver m\u00e1s</code>]</li> <li><code>protected_route</code>: Protege la ruta de la p\u00e1gina, seg\u00fan la configuraci\u00f3n del decorador <code>login</code> de la clase <code>FletEasy</code>. (opcional) [<code>Ver m\u00e1s</code>]</li> <li><code>custom_params</code>: Para agregar validaci\u00f3n de par\u00e1metros en la url personalizada usando un diccionario, donde la clave es el nombre de la validaci\u00f3n del par\u00e1metro y el valor es la funci\u00f3n personalizada que debe reportar un valor booleano. [<code>Ver m\u00e1s</code>]</li> <li><code>middleware</code>: Act\u00faa como intermediario entre diferentes componentes de software, interceptando y procesando solicitudes y respuestas. Permiten agregar funcionalidades a una aplicaci\u00f3n de manera flexible y modular. (opcional) [<code>Ver m\u00e1s</code>]</li> </ul>"},{"location":"es/add-pages/in-automatic/","title":"De forma autom\u00e1tica","text":"<p>Olv\u00eddate de las importaciones de cada uno de los archivos .py y las funciones o variables de las p\u00e1ginas. Para esto debes tener un orden adecuado donde todos los archivos .py que contienen cada p\u00e1gina deben estar en una carpeta, por ejemplo <code>views</code>. La configuraci\u00f3n se realiza en la clase <code>FletEasy</code> del par\u00e1metro <code>path_views</code> y en cada uno de los archivos .py usar la clase <code>AddPages</code>.</p>"},{"location":"es/add-pages/in-automatic/#estructura-de-la-aplicacion","title":"Estructura de la aplicaci\u00f3n","text":""},{"location":"es/add-pages/in-automatic/#ejemplo","title":"Ejemplo","text":"user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nusers = fs.AddPagesy(\n    route_prefix='/user'\n)\n\n# -&gt; Urls to be created:\n# * '/user/task'\n# * '/user/information'\n\n@users.page('/task', title='Task')\ndef task_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text('Task'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n\n@users.page('/information', title='Information')\nasync def information_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text('Information'),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre> <p>El archivo <code>main.py</code> reconocer\u00e1 autom\u00e1ticamente las p\u00e1ginas creadas en cada uno de los archivos .py de la carpeta <code>views</code>.</p> main.py<pre><code>import flet_easy as fs\nfrom pathlib import Path\n\napp = fs.FletEasy(\n    route_init='/user/task',\n    path_views=Path(__file__).parent / \"views\",\n)\n\napp.run()\n</code></pre>"},{"location":"es/add-pages/through-classes/","title":"A trav\u00e9s de clases","text":"<p>Disponible desde la versi\u00f3n 0.2.4</p> <p>Crear nuevas p\u00e1ginas (<code>View</code>) usando clases, no necesitas heredar de ninguna otra clase para agregar la p\u00e1gina, solo necesitas:</p> <ul> <li>Usar el decorador <code>page</code>.</li> <li>El constructor debe tener como par\u00e1metro obligatorio <code>data:fs.Datasy</code> y si recibe un par\u00e1metro por medio de la url debe usarse como par\u00e1metro.</li> <li>La clase a usar debe tener un m\u00e9todo obligatorio llamado <code>build</code> que devolver\u00e1 <code>View</code> de flet, puede ser async si es necesario. Este m\u00e9todo <code>build</code> no recibe ning\u00fan par\u00e1metro.</li> </ul> <p>\ud83e\udd14 \u00bfpor qu\u00e9 usar una clase? La clase puede tener varios beneficios, como la herencia que es \u00fatil para evitar repetir c\u00f3digo, entre otros.</p> <p>Soporta async</p>"},{"location":"es/add-pages/through-classes/#ejemplo","title":"Ejemplo","text":"main.py<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/page-1\",\n)\n\n# ----------------- Custom class for multiple pages to use --------------------\nclass Custom:\n    def __init__(self):\n        pass\n\n    def custom_appbar(self):\n        return ft.AppBar(\n            title=ft.Text(\"App\"),\n            actions=[\n                ft.Row(\n                    controls=[\n                        ft.FilledButton(\n                            \"Page 1\",\n                            on_click=self.data.go(\"/page-1\"),\n                            style=ft.ButtonStyle(\n                                bgcolor=ft.colors.RED_600,\n                            ),\n                        ),\n                        ft.FilledButton(\n                            \"Page 2\",\n                            on_click=self.data.go(\"/page-2/100\"),\n                            style=ft.ButtonStyle(\n                                bgcolor=ft.colors.AMBER_500,\n                            ),\n                        ),\n                    ]\n                )\n            ],\n        )\n\n# -------------------------------- Add page 1 --------------------------------\n@app.page(route=\"/page-1\", title=\"Page 1\")\nclass Page1(Custom):\n    def __init__(self, data: fs.Datasy):\n        self.data = data\n\n    def build(self):\n        return ft.View(\n            controls=[ft.Text(\"Page 1\", size=50)],\n            appbar=self.custom_appbar(),\n            vertical_alignment=\"center\",\n            horizontal_alignment=\"center\",\n        )\n\n# -------------------------------- Add page 2 --------------------------------\n@app.page(route=\"/page-2/{id}\", title=\"Page 2\")\nclass Page2(Custom):\n    def __init__(self, data: fs.Datasy, id: int):\n        self.data = data\n        self.id = id\n\n    def build(self):\n        return ft.View(\n            controls=[ft.Text(f\"Page 2: \\nID-URL = {self.id}\", size=50)],\n            appbar=self.custom_appbar(),\n            vertical_alignment=\"center\",\n            horizontal_alignment=\"center\",\n        )\n\napp.run()\n</code></pre>"},{"location":"es/add-pages/through-classes/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/add-pages/through-decorators/","title":"A trav\u00e9s de decoradores","text":""},{"location":"es/add-pages/through-decorators/#agregar-paginas-desde-otros-archivos-a-la-aplicacion-principal","title":"Agregar p\u00e1ginas desde otros archivos a la aplicaci\u00f3n principal","text":"<p>Para crear una p\u00e1gina en un archivo <code>file.py</code> diferente al archivo <code>main.py</code> de la aplicaci\u00f3n, necesitas usar la clase <code>AddPagesy</code>.</p>"},{"location":"es/add-pages/through-decorators/#addpagesy","title":"<code>AddPagesy</code>","text":"<p>Requiere el par\u00e1metro:</p> <ul> <li><code>route_prefix</code>: cadena de texto que se vincular\u00e1 a la url del decorador de p\u00e1gina, ejemplo(/users) esto englobar\u00e1 todas las urls de esta clase. (opcional)</li> </ul> <p>M\u00e9todos:</p> <ul> <li><code>page()</code>: Decorador para agregar una nueva p\u00e1gina a la aplicaci\u00f3n. Este m\u00e9todo decorador act\u00faa de manera similar a la clase <code>Pagesy</code> y contiene los mismos par\u00e1metros requeridos. (<code>Ver m\u00e1s</code>)</li> </ul> <p>Soporta async</p>"},{"location":"es/add-pages/through-decorators/#estructura-de-la-aplicacion","title":"Estructura de la aplicaci\u00f3n","text":"URLs a crear: <ul> <li><code>'/user/task'</code></li> <li><code>'/user/information'</code></li> <li><code>'/user/test'</code></li> </ul>"},{"location":"es/add-pages/through-decorators/#ejemplo-usando-funciones","title":"Ejemplo usando funciones","text":"user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\nusers = fs.AddPagesy(\n    route_prefix='/user'\n)\n\n# -&gt; Urls to be created:\n# * '/user/task'\n# * '/user/information'\n# * '/user/test'\n\n@users.page('/task', title='Task')\ndef task_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text('Task'),\n            ft.FilledButton(\n                            \"Go Information\",\n                            on_click=data.go(\"/users/information\"),\n                        ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n\n@users.page('/information', title='Information')\nasync def information_page(data: fs.Datasy):\n\n    return ft.View(\n        controls=[\n            ft.Text('Information'),\n            ft.FilledButton(\n                            \"Go Test\",\n                            on_click=data.go(\"/users/test\"),\n                        ),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n\n    )\n</code></pre>"},{"location":"es/add-pages/through-decorators/#ejemplo-usando-clases","title":"Ejemplo usando clases","text":"<p>Disponible desde la versi\u00f3n 0.2.4</p> <p>Crear nuevas p\u00e1ginas (<code>View</code>) usando clases, no necesitas heredar de ninguna otra clase para agregar la p\u00e1gina, solo necesitas:</p> <ul> <li>Usar el decorador <code>page</code>.</li> <li>El constructor debe tener como par\u00e1metro obligatorio <code>data:fs.Datasy</code> y si recibe un par\u00e1metro por medio de la url debe usarse como par\u00e1metro.</li> <li>La clase a usar debe tener un m\u00e9todo obligatorio llamado <code>build</code> que devolver\u00e1 <code>View</code> de flet, puede ser async si es necesario. Este m\u00e9todo <code>build</code> no recibe ning\u00fan par\u00e1metro.</li> </ul> <p>\ud83e\udd14 \u00bfpor qu\u00e9 usar una clase?</p> <p>La clase puede tener varios beneficios, como la herencia que es \u00fatil para evitar repetir c\u00f3digo, entre otros.</p> <p>\ud83d\udc40 Continuando con el c\u00f3digo anterior...</p> user.py<pre><code>@users.page('/test', title='test')\nClass TestPage:\n    def __init__(self, data:ft.Datasy):\n        self.data = data\n\n    async def build(self):\n        return ft.View(\n            controls=[\n                ft.Text('Test'),\n                ft.FilledButton(\n                    \"Go Task\",\n                    on_click=self.data.go(\"/users/task\"),\n                ),\n            ],\n            vertical_alignment=\"center\",\n            horizontal_alignment=\"center\"\n        )\n</code></pre>"},{"location":"es/add-pages/through-decorators/#agregando-paginas","title":"Agregando p\u00e1ginas","text":"<p>Ahora c\u00f3mo agregar a la aplicaci\u00f3n principal el archivo <code>main.py</code>. Para esto usamos el m\u00e9todo <code>add_pages</code> que requiere como par\u00e1metro una lista de todas las p\u00e1ginas de otros archivos que queremos agregar.</p> main.py<pre><code>import flet_easy as fs\nfrom views.user import users\n\napp = fs.FletEasy(\n    route_init='/user/task',\n)\n\napp.add_pages([users])\n\napp.run()\n</code></pre>"},{"location":"es/add-pages/through-decorators/#sin-instanciar-addpagesy","title":"sin instanciar <code>AddPagesy</code>","text":"<p>Disponible desde la versi\u00f3n 0.2.7</p> <p>Agregar p\u00e1gina sin crear una instancia de la clase <code>AddPagesy</code>. Para esto se usa el decorador <code>@fs.page()</code>, \u00fatil si no necesitas compartir parte de las URLs entre p\u00e1ginas</p>"},{"location":"es/add-pages/through-decorators/#ejemplo","title":"Ejemplo","text":"<p>Es importante establecer <code>path_views</code> para que funcione correctamente</p> main.py<pre><code>import flet_easy as fs\nfrom pathlib import Path\n\napp = fs.FletEasy(\n          route_init=\"/test\",\n          path_views=Path(__file__).parent / \"views\",\n)\n\napp.run()\n</code></pre> <ul> <li>archivo de la carpeta <code>views</code></li> </ul> user.py<pre><code>import flet_easy as fs\nimport flet as ft\n\n@fs.page(route=\"/test\")\ndef page_test(data:fs.Datasy):\n      return ft.View(\n             controls=[\n                 ft.Text(\"Test use\")\n             ]\n     )\n</code></pre>"},{"location":"es/customized-app/control-view-configuration/","title":"Configuraci\u00f3n de vista de control","text":""},{"location":"es/customized-app/control-view-configuration/#agregar-configuraciones-del-controlador-view-de-flet","title":"Agregar configuraciones del controlador <code>View</code> de Flet","text":"<p>Que puede ser reutilizado en cada una de las p\u00e1ginas a trav\u00e9s del par\u00e1metro <code>data:fs.Datasy</code> en la funci\u00f3n decoradora <code>page</code> de la aplicaci\u00f3n.</p> <p>El decorador <code>view</code> para agregar controles personalizados a la aplicaci\u00f3n, la funci\u00f3n decoradora devolver\u00e1 la clase <code>Viewsy</code> de FletEasy. La cual se obtendr\u00e1 en funciones con par\u00e1metro <code>data:fs.Datasy</code> y puede agregarse a la vista de p\u00e1gina decorada con <code>page</code> de la clase FletEasy.</p> <ul> <li>La funci\u00f3n decoradora debe recibir un par\u00e1metro obligatorio, por ejemplo: <code>data:fs.Datasy</code>.</li> <li>Agregar controles universales para usar en m\u00e1s de una p\u00e1gina de manera simple.</li> </ul>"},{"location":"es/customized-app/control-view-configuration/#ejemplo","title":"Ejemplo","text":"<p>Creamos un control <code>AppBar</code> de <code>Flet</code>, para poder ser reutilizado en las otras p\u00e1ginas.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/home\")\n\n@app.view\ndef view(data: fs.Datasy):\n    return fs.Viewsy(\n        appbar=ft.AppBar(\n            title=ft.Text(\"AppBar Example\"),\n            center_title=False,\n            bgcolor=ft.colors.SURFACE_VARIANT,\n            actions=[\n                ft.PopupMenuButton(\n                    items=[\n                        ft.PopupMenuItem(\n                            text=\"\ud83d\udd25 Home\",\n                            on_click=data.go(data.route_init)\n                        ),\n                        ft.PopupMenuItem(\n                            text=\"\ud83d\udd25 Dasboard\",\n                            on_click=data.go(\"/dasboard\")\n                        ),\n                    ]\n                ),\n            ],\n        ),\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/home\", title=\"Flet-Easy\", page_clear=True)\ndef home_page(data: fs.Datasy):\n    # obtenemos los valores\n    view = data.view\n    # Podemos cambiar los valores del objeto appBar, por ejemplo en el t\u00edtulo.\n    view.appbar.title = ft.Text(\"Home\")\n    return ft.View(\n        controls=[\n            ft.Text(\"Home page\", size=50),\n        ],\n        appbar=view.appbar,  # Reutilizamos el control\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/dasboard\", title=\"Dasboard\")\ndef dasboard_page(data: fs.Datasy):\n    # obtenemos los valores\n    view = data.view\n    # Podemos cambiar los valores del objeto appBar, por ejemplo en el t\u00edtulo.\n    view.appbar.title = ft.Text(\"Dasboard\")\n    return ft.View(\n        controls=[\n            ft.Text(\"Dasboard page\", size=50),\n        ],\n        appbar=view.appbar,  # Reutilizamos el control\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"es/customized-app/control-view-configuration/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/customized-app/events/","title":"Eventos","text":""},{"location":"es/customized-app/events/#configurar-eventos-personalizados","title":"Configurar eventos personalizados","text":"<p><code>config_event_handler</code> es un decorador para agregar configuraciones de eventos de <code>Flet</code>. La funci\u00f3n decorada debe recibir el par\u00e1metro [data:Datasy] para poder manipular los elementos de la aplicaci\u00f3n.</p>"},{"location":"es/customized-app/events/#ejemplo","title":"Ejemplo","text":"<p>!!! example \"\" * Manejar el evento cuando la aplicaci\u00f3n se desconecta</p> <pre><code>@app.config_event_handler\ndef event_handler(data: fs.Datasy):\n    page = data.page\n\n    def on_disconnect(e):\n        print(\"Disconnect test application\")\n\n    page.on_disconnect = on_disconnect\n</code></pre>"},{"location":"es/customized-app/general-settings/","title":"Configuraciones generales","text":"<p>Esto se logra a trav\u00e9s del valor <code>page</code> proporcionado por <code>Flet</code>. Para esto tienes que usar el decorador <code>config</code> del objeto <code>Flet-Easy</code>.</p> <p>Decorador para agregar una configuraci\u00f3n personalizada a la aplicaci\u00f3n:</p> <ul> <li>La funci\u00f3n decoradora debe recibir un par\u00e1metro obligatorio, por ejemplo: <code>page:ft.Page</code>. El cual puede ser utilizado para realizar configuraciones universales de la aplicaci\u00f3n.</li> <li>La funci\u00f3n decoradora no devuelve nada.</li> </ul>"},{"location":"es/customized-app/general-settings/#ejemplo","title":"Ejemplo","text":"<p>En este ejemplo cambiamos las transiciones de p\u00e1gina</p> <pre><code>@app.config\ndef config(page: ft.Page):\n    theme = ft.Theme()\n    platforms = [\"android\", \"ios\", \"macos\", \"linux\", \"windows\"]\n    for platform in platforms:  # Eliminando animaci\u00f3n al cambiar de ruta.\n        setattr(theme.page_transitions, platform, ft.PageTransitionTheme.NONE)\n    theme.text_theme = ft.TextTheme()\n    page.theme = theme\n</code></pre>"},{"location":"es/customized-app/page-404/","title":"P\u00e1gina 404","text":"<p>La cual se activar\u00e1 cuando no se encuentre una p\u00e1gina (ruta). El decorador <code>page_404</code> sirve para agregar una nueva p\u00e1gina personalizada cuando no se encuentra una ruta en la aplicaci\u00f3n, necesita los siguientes par\u00e1metros:</p>"},{"location":"es/customized-app/page-404/#parametros","title":"par\u00e1metros","text":"<ul> <li><code>route</code>: cadena de texto de la url, por ejemplo ('/FletEasy-404'). (opcional).</li> <li><code>title</code>: Define el t\u00edtulo de la p\u00e1gina. (opcional).</li> <li><code>clear_page</code>: elimina las p\u00e1ginas de la lista page.views de flet. (opcional)</li> </ul> <p>La funci\u00f3n decorada debe recibir un par\u00e1metro obligatorio, por ejemplo: <code>data:fs.Datasy</code>.</p>"},{"location":"es/customized-app/page-404/#ejemplo","title":"Ejemplo","text":"<pre><code>@app.page_404('/FletEasy-404', title=\"Error 404\")\ndef page404(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(f'Custom 404 error', size=30),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre>"},{"location":"es/customized-app/route-protection/","title":"Protecci\u00f3n de rutas","text":"<p>Para configurar la protecci\u00f3n de rutas, se utiliza el decorador <code>login</code> del objeto creado de la aplicaci\u00f3n. La utilidad de este decorador es obtener los valores que hemos registrado previamente en el <code>page.client_storage</code> (m\u00e1s detalles aqu\u00ed), luego puedes realizar validaciones con una base de datos o cualquier gestor de datos utilizado.</p> <p>Decorador para agregar una configuraci\u00f3n de inicio de sesi\u00f3n a la aplicaci\u00f3n (<code>protected_route</code>):</p> <ul> <li>La funci\u00f3n decoradora debe recibir un par\u00e1metro obligatorio, por ejemplo: <code>data:fs.Datasy</code>. El cual puede ser utilizado para obtener informaci\u00f3n y realizar configuraciones universales de la aplicaci\u00f3n.</li> <li>La funci\u00f3n decoradora debe devolver un booleano.</li> </ul>"},{"location":"es/customized-app/route-protection/#ejemplo","title":"Ejemplo","text":"<p>En este caso es un ejemplo b\u00e1sico, con una prueba en una base de datos ficticia.</p> <pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/login\",\n    route_login=\"/login\"\n)\n\ndb = [] # Base de datos\n\n@app.login\ndef login_x(data: fs.Datasy):\n    username = data.page.client_storage.get(\"login\")\n    \"\"\" Comprobamos si existe un valor con la clave login \"\"\"\n    if username is not None and username in db:\n        \"\"\"Verificamos si el nombre de usuario que est\u00e1 almacenado en el navegador\n        est\u00e1 en la base de datos simulada.\"\"\"\n        return True\n    return False\n\n@app.page(route=\"/dashboard\", title=\"Dashboard\", protected_route=True)\ndef dashboard_page(data: fs.Datasy):\n    return ft.View(\n        controls=[\n            ft.Text(\"Dash\", size=30),\n            # Eliminamos la clave que hemos registrado previamente\n            ft.ElevatedButton(\"Logaut\", on_click=data.logout(\"login\")),\n            ft.ElevatedButton(\"Home\", on_click=data.go(\"/login\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\n@app.page(route=\"/login\", title=\"Login\")\ndef login_page(data: fs.Datasy):\n    # crear usuario almacenado de inicio de sesi\u00f3n\n    username = ft.TextField(label=\"Username\")\n\n    def store_login(e):\n        db.append(username.value) # Agregamos a la base de datos simulada\n        \"\"\"Primero los valores deben almacenarse en el navegador, luego en el decorador\n        login se debe recuperar el valor a trav\u00e9s de la clave utilizada y luego\n        se deben usar validaciones.\"\"\"\n        data.login(key=\"login\", value=username.value, next_route=\"/dashboard\")\n\n    return ft.View(\n        controls=[\n            ft.Text(\"login\", size=30),\n            username,\n            ft.ElevatedButton(\"store login in browser\", on_click=store_login),\n            ft.ElevatedButton(\"go Dasboard\", on_click=data.go(\"/dashboard\")),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"es/customized-app/route-protection/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/customized-app/route-protection/#login","title":"login","text":"<p>Registra en el almacenamiento del cliente la clave y el valor en todas las sesiones del navegador.</p> <p>Par\u00e1metros <code>data.login</code>:</p> <ul> <li><code>key</code>: Es el identificador para almacenar el valor en el almacenamiento del cliente.</li> <li><code>value</code>: Se recomienda usar un dict si usas JWT.</li> <li><code>next_route</code>: Redirecciona a la siguiente ruta despu\u00e9s de crear el login.</li> <li><code>time_expiry</code>: Tiempo para que expire la sesi\u00f3n, usa la clase <code>timedelta</code> para configurar. (Opcional) (Se requiere uso de JWT)</li> <li><code>sleep</code>: Tiempo para realizar comprobaciones de inicio de sesi\u00f3n, por defecto es 1s. (Opcional) (Se requiere uso de JWT)</li> </ul>"},{"location":"es/customized-app/route-protection/#logout","title":"logout","text":"<p>Cierra las sesiones de todas las pesta\u00f1as del navegador o del dispositivo utilizado, que se ha configurado previamente con el m\u00e9todo <code>login</code>.</p> <p>Par\u00e1metros <code>data.logout</code>:</p> <ul> <li><code>key</code>: Es el identificador para almacenar el valor en el almacenamiento del cliente.</li> </ul>"},{"location":"es/events/keyboard-event/","title":"Evento de teclado","text":"<p>Para usar este m\u00e9todo, se obtiene el par\u00e1metro de la funci\u00f3n decorada por <code>page</code> a trav\u00e9s de <code>data</code>.</p> <p>Maneja la entrada de valores por teclado</p>"},{"location":"es/events/keyboard-event/#metodos","title":"M\u00e9todos","text":"<ul> <li><code>add_control(function: Callable)</code>: Agrega una configuraci\u00f3n de controlador (m\u00e9todo de una clase o funci\u00f3n), que se ejecuta con el evento <code>on_keyboard_event</code>.</li> <li><code>key()</code>: devuelve el valor ingresado por teclado.</li> <li><code>shift()</code>: devuelve el valor ingresado por teclado.</li> <li><code>ctrl()</code>: devuelve el valor ingresado por teclado.</li> <li><code>alt()</code>: devuelve la entrada por teclado.</li> <li><code>meta()</code>: devuelve la entrada por teclado.</li> <li><code>test()</code>: devuelve un mensaje de todos los valores de entrada del teclado (key, Shift, Control, Alt, Meta).</li> </ul>"},{"location":"es/events/keyboard-event/#ejemplo","title":"Ejemplo","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(\n    route_init=\"/keyboard\",\n    on_Keyboard=True\n)\n\n@app.page(route=\"/keyboard\", title=\"Use Keyboard\")\ndef keyboard_page(data: fs.Datasy):\n    page = data.page\n    on_keyboard = data.on_keyboard_event\n    use_keyboard = ft.Column()\n\n    def show_event():\n        use_keyboard.controls.append(ft.Text(on_keyboard.test()))\n        page.update()\n\n    # Agregar funci\u00f3n que se ejecutar\u00e1 al presionar el teclado.\n    on_keyboard.add_control(show_event)\n\n    return ft.View(\n        controls=[\n            ft.Text(\n                \"Use Keyboard\",\n                size=30\n            ),\n            use_keyboard\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\",\n    )\n\napp.run()\n</code></pre>"},{"location":"es/events/keyboard-event/#demo","title":"\ud83c\udfac Demo","text":""},{"location":"es/events/on-resize/","title":"Evento de redimensionado","text":"<p>Para usar este evento, se obtiene desde <code>data</code> de la funci\u00f3n decorada por <code>page</code>.</p>"},{"location":"es/events/on-resize/#1-ejemplo","title":"1. Ejemplo","text":"<pre><code>@app.page(route=\"/resize\", title=\"Use Resize)\ndef resize_page(data:fs.Datasy):\n    # obteniendo los valores del evento\n    on_resize = data.on_resize\n    return ft.View(\n        controls=[\n            ft.Text('Use Resize', size=30),\n        ],\n        vertical_alignment=\"center\",\n        horizontal_alignment=\"center\"\n    )\n</code></pre> <p>Cuando obtenemos los valores del evento, podemos usar los m\u00e9todos que tiene este objeto <code>on_resize</code>.</p> <ul> <li><code>heightX(&lt;value&gt;)</code>: Este m\u00e9todo permite obtener los valores de la altura de la p\u00e1gina, que requiere como par\u00e1metro ingresar un valor entero de 1 a 100 (100 = 100%).</li> <li><code>widthX(&lt;value&gt;)</code>: Este m\u00e9todo es similar al anterior en t\u00e9rminos de ancho de p\u00e1gina.</li> </ul> <p>Manipulaci\u00f3n del margen o relleno de la p\u00e1gina, esto es importante ya que permite usar correctamente los m\u00e9todos anteriores, es decir el margen o relleno de la p\u00e1gina tiene que ser <code>0</code> para que los m\u00e9todos anteriores funcionen correctamente, en el caso que quieras poner un margen personalizado, puedes corregirlo modificando en el margen de <code>on_resize</code>.</p> <p>Nota</p> <p>Si se usa el control <code>AppBar</code>, si el relleno es 0, el margen de <code>on_resize</code> debe ser 28 en el eje y (dependiente de la plataforma).</p> <ul> <li><code>margin_y</code>: Requiere un valor entero en el eje y.</li> <li><code>margin_x</code>: Requiere un valor entero en el eje x.</li> </ul>"},{"location":"es/events/on-resize/#2-ejemplo","title":"2. Ejemplo","text":"<pre><code>import flet as ft\nimport flet_easy as fs\n\napp = fs.FletEasy(route_init=\"/resize\")\n\n@app.page(route=\"/resize\", title=\"Use resize\")\ndef resize_page(data:fs.Datasy):\n    # obteniendo los valores del evento\n    on_resize = data.on_resize\n    # Modificando el margen personalizado\n    # on_resize.margin_y = 10\n    return ft.View(\n        controls=[\n            ft.Container(\n                bgcolor=ft.colors.GREEN_600,\n                height=on_resize.heightX(50)\n            ),\n            ft.Container(\n                bgcolor=ft.colors.BLUE_600,\n                height=on_resize.heightX(50),\n                width=on_resize.widthX(50)\n            )\n        ],\n        vertical_alignment=\"center\",\n        spacing=0,\n        padding=0,  # Relleno personalizado\n    )\n\napp.run()\n</code></pre>"},{"location":"es/events/on-resize/#demo","title":"\ud83d\udcf7 Demo","text":""}]}